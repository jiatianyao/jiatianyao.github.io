<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张洪铭的个人博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-25T16:09:57.310Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>张洪铭</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习-梯度下降</title>
    <link href="http://yoursite.com/2018/04/27/Mathematical%20regression%20gradient%20descent/"/>
    <id>http://yoursite.com/2018/04/27/Mathematical regression gradient descent/</id>
    <published>2018-04-27T01:30:00.000Z</published>
    <updated>2018-07-25T16:09:57.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="梯度下降："><a href="#梯度下降：" class="headerlink" title="梯度下降："></a>梯度下降：</h3><p>批量梯度下降法（Batch Gradient Descent，简称BGD）<br>    优点：全局最优解；易于并行实现；<br>　　缺点：当样本数目很多时，训练过程会很慢。<br>随机梯度下降法（Stochastic Gradient Descent，简称SGD）<br>    优点：训练速度快；迭代次数少<br>    缺点：准确度下降，并不是全局最优；不易于并行实现。<br>小批量梯度下降算法（MBGD）<br>如果损失函数是凸函数，梯度下降法得到的解就一定是全局最优解。</p>
<h4 id="凸凹函数："><a href="#凸凹函数：" class="headerlink" title="凸凹函数："></a>凸凹函数：</h4><p>设f(x)在区间D上连续，如果对D上任意两点a、b恒有<br>f（（a+b）/2）&lt;(f(a)+f(b))/2<br>那么称f(x)在D上的图形是（向上）凹的（或凹弧）；如果恒有<br>f（（a+b）/2）&gt;(f(a)+f(b))/2<br>那么称f(x)在D上的图形是（向上）凸的（或凸弧）</p>
<h3 id="梯度下降相关概念："><a href="#梯度下降相关概念：" class="headerlink" title="梯度下降相关概念："></a>梯度下降相关概念：</h3><ol>
<li>步长（Learning rate）：步长决定了在梯度下降迭代的过程中，每一步沿梯度负方向前进的长度。用上面下山的例子，步长就是在当前这一步所在位置沿着最陡峭最易下山的位置走的那一步的长度。</li>
</ol>
<p>2.特征（feature）：指的是样本中输入部分，比如2个单特征的样本（x(0),y(0)）,（x(1),y(1)）（x(0),y(0)）,（x(1),y(1)）,则第一个样本特征为x(0)x(0)，第一个样本输出为y(0)y(0)。</p>
<ol>
<li><p>假设函数（hypothesis function）：在监督学习中，为了拟合输入样本，而使用的假设函数，记为hθ(x)hθ(x)。比如对于单个特征的m个样本（x(i),y(i)）(i=1,2,…m)（x(i),y(i)）(i=1,2,…m),可以采用拟合函数如下： hθ(x)=θ0+θ1xhθ(x)=θ0+θ1x。</p>
</li>
<li><p>损失函数（loss function）：为了评估模型拟合的好坏，通常用损失函数来度量拟合的程度。损失函数极小化，意味着拟合程度最好，对应的模型参数即为最优参数。在线性回归中，损失函数通常为样本输出和假设函数的差取平方。比如对于m个样本（xi,yi）(i=1,2,…m)（xi,yi）(i=1,2,…m),采用线性回归，损失函数为：</p>
<pre><code>J(θ0,θ1)=∑i=1m(hθ(xi)−yi)2J(θ0,θ1)=∑i=1m(hθ(xi)−yi)2
</code></pre><p>其中xixi表示第i个样本特征，yiyi表示第i个样本对应的输出，hθ(xi)hθ(xi)为假设函数。
　　　　</p>
</li>
</ol>
<h3 id="局部加权回归"><a href="#局部加权回归" class="headerlink" title="局部加权回归"></a>局部加权回归</h3><p>简单来说，这个过程其实是在先拟合出一条曲线，然后再用这个曲线去预测需要预测的点。(源自百度)<br>为什么改进要用加权回归呢？ 很简单，因为非线性拟合出直线误差会很大，这里的局部加权类似于knn算法的权重，即距离中心点越近的权重越大，对拟合曲线的影响也就越大，所以也有了局部加权这一名词</p>
<p>参考文献：<br><a href="https://blog.csdn.net/Gentle_Guan/article/details/76586689?locationNum=8&amp;fps=1" target="_blank" rel="external">https://blog.csdn.net/Gentle_Guan/article/details/76586689?locationNum=8&amp;fps=1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;梯度下降：&quot;&gt;&lt;a href=&quot;#梯度下降：&quot; class=&quot;headerlink&quot; title=&quot;梯度下降：&quot;&gt;&lt;/a&gt;梯度下降：&lt;/h3&gt;&lt;p&gt;批量梯度下降法（Batch Gradient Descent，简称BGD）&lt;br&gt;    优点：全局最优解；易于并行
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-逻辑回归模型特征处理</title>
    <link href="http://yoursite.com/2018/04/08/Mathematical%20Feature%20processing%20of%20logistic%20regression%20model/"/>
    <id>http://yoursite.com/2018/04/08/Mathematical Feature processing of logistic regression model/</id>
    <published>2018-04-08T01:30:00.000Z</published>
    <updated>2018-07-25T16:10:12.622Z</updated>
    
    <content type="html"><![CDATA[<p>如果有异常值，使用极大-极小归一化或均值-标准差归一化，计算之前需要将极端值排除在外。<br>例如：<br>x’=x−min/ max−min<br>计算max与min时需要用P1与P99来代替。新生成的值如果超过1用1表示，如果小于0 用0表示</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果有异常值，使用极大-极小归一化或均值-标准差归一化，计算之前需要将极端值排除在外。&lt;br&gt;例如：&lt;br&gt;x’=x−min/ max−min&lt;br&gt;计算max与min时需要用P1与P99来代替。新生成的值如果超过1用1表示，如果小于0 用0表示&lt;/p&gt;

    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-决策树算法实例</title>
    <link href="http://yoursite.com/2018/02/18/Mathematical%20decision%20tree/"/>
    <id>http://yoursite.com/2018/02/18/Mathematical decision tree/</id>
    <published>2018-02-18T01:30:00.000Z</published>
    <updated>2018-07-25T16:10:05.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="决策树："><a href="#决策树：" class="headerlink" title="决策树："></a>决策树：</h2><p>有监督学习方法<br>是一种预测模型<br>是在已知各种情况发生概率基础上，通过构建决策树来进行分析的一种方法</p>
<h3 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h3><p>从跟节点开始，预测待分类项对应的特征属性，按照值选择输出分支，直到叶子节点，将叶子节点的存放类别作为树的结果</p>
<p>决策树分为两类：<br>分类，回归<br>前者用于分类标签值，后者用于预测连续值<br>常用算法ID3，C4,5，CART</p>
<h3 id="数据标准化："><a href="#数据标准化：" class="headerlink" title="数据标准化："></a>数据标准化：</h3><p>StandardScaler (基于特征矩阵的列，将属性值转换至服从正态分布)<br>标准化是依照特征矩阵的列处理数据，其通过求z-score的方法，将样本的特征值转换到同一量纲下<br>常用与基于正态分布的算法，比如回归<br>数据归一化<br>MinMaxScaler （区间缩放，基于最大最小值，将数据转换到0,1区间上的）<br>提升模型收敛速度，提升模型精度<br>常见用于神经网络<br>Normalizer （基于矩阵的行，将样本向量转换为单位向量）<br>其目的在于样本向量在点乘运算或其他核函数计算相似性时，拥有统一的标准<br>常见用于文本分类和聚类、logistic回归中也会使用，有效防止过拟合</p>
<h3 id="特征选择："><a href="#特征选择：" class="headerlink" title="特征选择："></a>特征选择：</h3><p>从已有的特征中选择出影响目标值最大的特征属性</p>
<h2 id="常用方法：-分类：F统计量、卡方系数，互信息mutual-info-classif"><a href="#常用方法：-分类：F统计量、卡方系数，互信息mutual-info-classif" class="headerlink" title="常用方法：{ 分类：F统计量、卡方系数，互信息mutual_info_classif"></a>常用方法：{ 分类：F统计量、卡方系数，互信息mutual_info_classif</h2><pre><code>{ 连续：皮尔逊相关系数 F统计量 互信息mutual_info_classif
</code></pre><h2 id="SelectKBest（卡方系数）"><a href="#SelectKBest（卡方系数）" class="headerlink" title="SelectKBest（卡方系数）"></a>SelectKBest（卡方系数）</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;决策树：&quot;&gt;&lt;a href=&quot;#决策树：&quot; class=&quot;headerlink&quot; title=&quot;决策树：&quot;&gt;&lt;/a&gt;决策树：&lt;/h2&gt;&lt;p&gt;有监督学习方法&lt;br&gt;是一种预测模型&lt;br&gt;是在已知各种情况发生概率基础上，通过构建决策树来进行分析的一种方法&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-行为模式</title>
    <link href="http://yoursite.com/2018/02/10/Design%20pattern%20behavior/"/>
    <id>http://yoursite.com/2018/02/10/Design pattern behavior/</id>
    <published>2018-02-10T01:30:00.000Z</published>
    <updated>2018-03-30T15:45:16.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>命令Command<br>    ——声明执行操作的接口。<br>具体命令ConcreteCommand<br>    ——定义接收对象和动作之间的绑定关系。<br>    ——通过引起接收者的相应动作来实现执行。<br>客户Client<br>    ——产生一个ConcreteCommand对象，并设置接收者。<br>引发者Invoker<br>    ——要求命令执行请求。<br>接收者Receiver<br>    ——知道如何执行与请求相联系的操作。</p>
<a id="more"></a>
<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>准备一个抽象类，定义一个算法的大体框架<br>将部分逻辑以具体方法以及具体构造子的形式实现<br>剩余的逻辑通过声明一些抽象方法来描述<br>这些抽象方法要求子类实现，<br>不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。<br>子类不改变算法的结构而重定义算法</p>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>同一应用对象不同展示形式，如一组数据映射为表格和柱状图。用户更改表格数据，柱状图要同步修改</p>
<p>关键对象：<br>抽象主题Subject<br>提供一个连接观察者对象和解除连接的接口。<br>知道它的观察者。可有任意数目的观察者对象观察一个主题。<br>可以增加和删除观察者对象，<br>具体主题ConcreteSubject：<br>通常用一个具体子类实现。<br>负责实现对观察者引用的聚集的管理力注。<br>将有关状态存入ConcreteObserver对象。<br>在具体主题内部状态改变时向它的观察者发送通知。</p>
<p>抽象观察者Observer ：<br>一般用一个抽象类或者一个接口实现，<br>为所有的具体观察者定义一个更新接口<br>更新接口包含的方法叫更新方法。<br>具体观察者ConcreteObserver<br>通常用一个具体子类实现，<br>保存一个指向ConcreteSubject对象的引用。<br>存储要与主题一致的状态。<br>实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调。</p>
<h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;&lt;/a&gt;责任链模式&lt;/h3&gt;&lt;h4 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h4&gt;&lt;p&gt;命令Command&lt;br&gt;    ——声明执行操作的接口。&lt;br&gt;具体命令ConcreteCommand&lt;br&gt;    ——定义接收对象和动作之间的绑定关系。&lt;br&gt;    ——通过引起接收者的相应动作来实现执行。&lt;br&gt;客户Client&lt;br&gt;    ——产生一个ConcreteCommand对象，并设置接收者。&lt;br&gt;引发者Invoker&lt;br&gt;    ——要求命令执行请求。&lt;br&gt;接收者Receiver&lt;br&gt;    ——知道如何执行与请求相联系的操作。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-工厂模式</title>
    <link href="http://yoursite.com/2018/01/27/Design%20pattern%20factory/"/>
    <id>http://yoursite.com/2018/01/27/Design pattern factory/</id>
    <published>2018-01-27T01:30:00.000Z</published>
    <updated>2018-02-08T16:00:47.673Z</updated>
    
    <content type="html"><![CDATA[<p>创建几个套皮肤，所有的UI控件 如按钮，滚动条，窗口 都要创建出来。现在需要红色主题，黑色主题，和蓝色主题3套皮肤。</p>
<p>接口类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Button</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScrollBar</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Window</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkinFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ScrollBar <span class="title">createScrollBar</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> Window <span class="title">createWindow</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>红色皮肤工厂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedSkinFactory</span> <span class="keyword">implements</span> <span class="title">SkinFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ScrollBar <span class="title">createScrollBar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedScrollBar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedButton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Window <span class="title">createWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedWindow();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedScrollBar</span> <span class="keyword">implements</span> <span class="title">ScrollBar</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"创建红色滚动条。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedButton</span> <span class="keyword">implements</span> <span class="title">Button</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"创建红色按钮"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedWindow</span> <span class="keyword">implements</span> <span class="title">Window</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"创建红色窗口。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkinClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SkinFactory BlackSkinFactory = <span class="keyword">new</span> BlackSkinFactory();</div><div class="line">        BlackSkinFactory.createButton().display();</div><div class="line">        BlackSkinFactory.createScrollBar().display();</div><div class="line">        BlackSkinFactory.createWindow().display();</div><div class="line"></div><div class="line">        SkinFactory RedSkinFactory = <span class="keyword">new</span> RedSkinFactory();</div><div class="line">        RedSkinFactory.createButton().display();</div><div class="line">        RedSkinFactory.createScrollBar().display();</div><div class="line">        RedSkinFactory.createWindow().display();</div><div class="line"></div><div class="line">        SkinFactory BlueSkinFactory = <span class="keyword">new</span> BlueSkinFactory();</div><div class="line">        BlueSkinFactory.createButton().display();</div><div class="line">        BlueSkinFactory.createScrollBar().display();</div><div class="line">        BlueSkinFactory.createWindow().display();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>sh输出结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">创建黑色按钮</div><div class="line">创建黑色滚动条。</div><div class="line">创建黑色窗口。</div><div class="line">创建红色按钮</div><div class="line">创建红色滚动条。</div><div class="line">创建红色窗口。</div><div class="line">创建蓝色按钮</div><div class="line">创建蓝色滚动条。</div><div class="line">创建蓝色窗口。</div></pre></td></tr></table></figure></p>
<p>其他颜色同上<br>代码结构截图：<br><img src="http://oh6ybr0jg.bkt.clouddn.com/daimajiegoutu-gongchang.png" alt="此处输入图片的描述"><br>结果截图：<br><img src="http://oh6ybr0jg.bkt.clouddn.com/jieguojietu-gongchang1.png" alt="此处输入图片的描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建几个套皮肤，所有的UI控件 如按钮，滚动条，窗口 都要创建出来。现在需要红色主题，黑色主题，和蓝色主题3套皮肤。&lt;/p&gt;
&lt;p&gt;接口类：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Button&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ScrollBar&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Window&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SkinFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ScrollBar &lt;span class=&quot;title&quot;&gt;createScrollBar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Button &lt;span class=&quot;title&quot;&gt;createButton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Window &lt;span class=&quot;title&quot;&gt;createWindow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式目录</title>
    <link href="http://yoursite.com/2018/01/27/Design%20pattern%20catalog/"/>
    <id>http://yoursite.com/2018/01/27/Design pattern catalog/</id>
    <published>2018-01-27T01:30:00.000Z</published>
    <updated>2018-02-06T14:27:35.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建性模式："><a href="#创建性模式：" class="headerlink" title="创建性模式："></a>创建性模式：</h3><p>1.类的创建模式——使用继承关系，把类的创建延迟到子类<br>2.对象的创建模式——把对象的创建过程动态地委派给另一个对象<br>    封装要创建的具体类（类的实例）的信息<br>    隐藏这些类（类的实例）被创建和组合的过程</p>
<p>包含<br>抽象工厂、建造者、工厂方式、原型、单例</p>
<h3 id="结构性模式："><a href="#结构性模式：" class="headerlink" title="结构性模式："></a>结构性模式：</h3><p>考虑如何组合类和对象构成较大的结构。<br>1.结构性类模式：使用继承来组合接口或实现<br>2.结构性对象模式：对象合成实现新功能。<br><a id="more"></a><br>包含：<br>适配器、桥接、组合、装饰着、外观、轻量、代理</p>
<h3 id="行为模式："><a href="#行为模式：" class="headerlink" title="行为模式："></a>行为模式：</h3><p>主要解决算法和对象之间的责任分配问题。<br>对象或类的模式<br>它们之间的通信模式。<br>包含：<br>责任链、命令、解释器、迭代、中介者、备忘录、观察者、状态、策略、模板方法、观察者</p>
<p>工厂方法主要针对一个产品等级结构<br>抽象工厂模式需要面对多个产品等级结构</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建性模式：&quot;&gt;&lt;a href=&quot;#创建性模式：&quot; class=&quot;headerlink&quot; title=&quot;创建性模式：&quot;&gt;&lt;/a&gt;创建性模式：&lt;/h3&gt;&lt;p&gt;1.类的创建模式——使用继承关系，把类的创建延迟到子类&lt;br&gt;2.对象的创建模式——把对象的创建过程动态地委派给另一个对象&lt;br&gt;    封装要创建的具体类（类的实例）的信息&lt;br&gt;    隐藏这些类（类的实例）被创建和组合的过程&lt;/p&gt;
&lt;p&gt;包含&lt;br&gt;抽象工厂、建造者、工厂方式、原型、单例&lt;/p&gt;
&lt;h3 id=&quot;结构性模式：&quot;&gt;&lt;a href=&quot;#结构性模式：&quot; class=&quot;headerlink&quot; title=&quot;结构性模式：&quot;&gt;&lt;/a&gt;结构性模式：&lt;/h3&gt;&lt;p&gt;考虑如何组合类和对象构成较大的结构。&lt;br&gt;1.结构性类模式：使用继承来组合接口或实现&lt;br&gt;2.结构性对象模式：对象合成实现新功能。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>python numpy</title>
    <link href="http://yoursite.com/2018/01/10/python%20numpy/"/>
    <id>http://yoursite.com/2018/01/10/python numpy/</id>
    <published>2018-01-10T03:30:00.000Z</published>
    <updated>2018-03-16T16:49:05.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook:"></a>jupyter notebook:</h3><p>1.arange<br>生成数组<br>np.arange(10)<br>array([0,1,2,3,4,5,6,7,8,9])</p>
<p>2.等差数列是指从第二项起，每一项与它的前一项的差等于同一个常数的一种数列，常用A、P表示<br>等差数列 linspace<br>np.linspace(1,10,5)<br>array([1. , 3.25 ,5.5,5.75,10])</p>
<p>np.linspace(1,10,5,endpoint=False)  相当于生成6个数只显示前五个<br>array([1. , 2.8 ,4.6,6.5,8.2])</p>
<p>3.等比数列是指从第二项起，每一项与它的前一项的比值等于同一个常数的一种数列<br>等比数列logspace<br>np.logspace(1,10,5)</p>
<p>4.shape<br><a id="more"></a><br>arr = np.array([  [1,2,3],<br>                  [2,3,4]<br>               ])</p>
<p>arr.shape<br>(2, 3)</p>
<p>5.zeros<br>help(np.zeros)<br>zeros(shape, dtype=float, order=’C’)<br> Examples<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.zeros(<span class="number">5</span>)</div><div class="line">array([ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.zeros((<span class="number">5</span>,), dtype=np.int)</div><div class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.zeros((<span class="number">2</span>, <span class="number">1</span>))</div><div class="line">array([[ <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>]])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = (<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.zeros(s)</div><div class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>]])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.zeros((<span class="number">2</span>,), dtype=[(<span class="string">'x'</span>, <span class="string">'i4'</span>), (<span class="string">'y'</span>, <span class="string">'i4'</span>)]) <span class="comment"># custom dtype</span></div><div class="line">array([(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>)],</div><div class="line">      dtype=[(<span class="string">'x'</span>, <span class="string">'&lt;i4'</span>), (<span class="string">'y'</span>, <span class="string">'&lt;i4'</span>)])</div></pre></td></tr></table></figure></p>
<p>6.ones<br>类似zeros,只不过填充的是1</p>
<p>7.empty<br>类似zeros,只不过填充的是随机值</p>
<p>8.reshape<br>把一维数组转置为多维数组<br>reshape 不会改变原来的ndarray，但是得到新的ndarray是原数组的视图<br>对于ndarray的一些方法操作，首先要区分是否会改变原来变量，以此来判断是视图还是副本</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jupyter-notebook&quot;&gt;&lt;a href=&quot;#jupyter-notebook&quot; class=&quot;headerlink&quot; title=&quot;jupyter notebook:&quot;&gt;&lt;/a&gt;jupyter notebook:&lt;/h3&gt;&lt;p&gt;1.arange&lt;br&gt;生成数组&lt;br&gt;np.arange(10)&lt;br&gt;array([0,1,2,3,4,5,6,7,8,9])&lt;/p&gt;
&lt;p&gt;2.等差数列是指从第二项起，每一项与它的前一项的差等于同一个常数的一种数列，常用A、P表示&lt;br&gt;等差数列 linspace&lt;br&gt;np.linspace(1,10,5)&lt;br&gt;array([1. , 3.25 ,5.5,5.75,10])&lt;/p&gt;
&lt;p&gt;np.linspace(1,10,5,endpoint=False)  相当于生成6个数只显示前五个&lt;br&gt;array([1. , 2.8 ,4.6,6.5,8.2])&lt;/p&gt;
&lt;p&gt;3.等比数列是指从第二项起，每一项与它的前一项的比值等于同一个常数的一种数列&lt;br&gt;等比数列logspace&lt;br&gt;np.logspace(1,10,5)&lt;/p&gt;
&lt;p&gt;4.shape&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—pandas</title>
    <link href="http://yoursite.com/2018/01/08/python%E2%80%94pandas/"/>
    <id>http://yoursite.com/2018/01/08/python—pandas/</id>
    <published>2018-01-08T01:30:00.000Z</published>
    <updated>2018-01-19T16:02:42.664Z</updated>
    
    <content type="html"><![CDATA[<p>from pandas import Series,DataFrame<br>import pandas as pd</p>
<h3 id="Series：一种类似于一维数组的对象，是由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。-索引可重复"><a href="#Series：一种类似于一维数组的对象，是由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。-索引可重复" class="headerlink" title="Series：一种类似于一维数组的对象，是由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。  索引可重复"></a>Series：一种类似于一维数组的对象，是由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。  索引可重复</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">arr = np.array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,np.NaN,<span class="number">10</span>])</div><div class="line">serises0=Series(arr)</div><div class="line">serises0</div></pre></td></tr></table></figure>
<p>0     1.0<br>1     3.0<br>2     5.0<br>3     NaN<br>4    10.0<br>dtype: float64<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serises0.dtype</div></pre></td></tr></table></figure></p>
<p>dtype(‘float64’)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serises0.index</div></pre></td></tr></table></figure>
<p>RangeIndex(start=0, stop=5, step=1)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serises0.values</div></pre></td></tr></table></figure>
<p>array([  1.,   3.,   5.,  nan,  10.])</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">serises1=Series(data=[<span class="number">91</span>,<span class="number">92</span>,<span class="number">93</span>],dtype=np.float64,index=[<span class="string">u'数学'</span>,<span class="string">u'语文'</span>,<span class="string">u'外语'</span>])</div><div class="line">serises1</div></pre></td></tr></table></figure>
<p>数学    91.0<br>语文    92.0<br>外语    93.0<br>dtype: float64</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dict0=&#123;<span class="string">u'数学'</span>:<span class="number">91.0</span>,<span class="string">u'语文'</span>:<span class="number">92</span>,<span class="string">u'外语'</span>:<span class="number">93</span>&#125;</div><div class="line">dict0</div></pre></td></tr></table></figure>
<p>{u’\u5916\u8bed’: 93, u’\u6570\u5b66’: 91.0, u’\u8bed\u6587’: 92}</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">serises2=Series(dict0)</div><div class="line">serises2</div></pre></td></tr></table></figure>
<p>外语    93.0<br>数学    91.0<br>语文    92.0<br>dtype: float64</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serises2[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>93.0</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serises2[<span class="string">u'外语'</span>]</div></pre></td></tr></table></figure>
<p>93.0</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serises2[<span class="string">'外语'</span>:<span class="string">'语文'</span>]</div></pre></td></tr></table></figure>
<p>外语    93.0<br>数学    91.0<br>语文    92.0<br>dtype: float64</p>
<p>Series运算，自动对齐索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">serises2=Series(data=[<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>],dtype=np.float64,index=[<span class="string">'p1'</span>,<span class="string">'p2'</span>,<span class="string">'p3'</span>])</div><div class="line">serises3=Series(data=[<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>],dtype=np.float64,index=[<span class="string">'p2'</span>,<span class="string">'p3'</span>,<span class="string">'p4'</span>,<span class="string">'p5'</span>])</div><div class="line">serises2 +serises3</div></pre></td></tr></table></figure></p>
<p>p1     NaN<br>p2    34.0<br>p3    36.0<br>p4     NaN<br>p5     NaN<br>dtype: float64</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">serises1.name=<span class="string">'name'</span></div><div class="line">serises1.index.name=<span class="string">'考试科目'</span></div><div class="line">serises1</div></pre></td></tr></table></figure>
<p>考试科目<br>数学    91.0<br>语文    92.0<br>外语    93.0<br>Name: name, dtype: float64</p>
<h3 id="DataFrame-：-表格形式的数据结构，包含一组有序的列，每列可以是不同的值类型，DataFrame既有行索引又有列索引，可以看做是由Series组成的字典"><a href="#DataFrame-：-表格形式的数据结构，包含一组有序的列，每列可以是不同的值类型，DataFrame既有行索引又有列索引，可以看做是由Series组成的字典" class="headerlink" title="DataFrame ： 表格形式的数据结构，包含一组有序的列，每列可以是不同的值类型，DataFrame既有行索引又有列索引，可以看做是由Series组成的字典"></a>DataFrame ： 表格形式的数据结构，包含一组有序的列，每列可以是不同的值类型，DataFrame既有行索引又有列索引，可以看做是由Series组成的字典</h3><p>通过二维数组创建<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df01=DataFrame([[<span class="string">'Tom'</span>,<span class="string">'John'</span>],[<span class="number">88</span>,<span class="number">90</span>]])</div><div class="line">df01</div></pre></td></tr></table></figure></p>
<pre><code>0    1
</code></pre><p>0    Tom    John<br>1    88    90</p>
<p>通过字典创建<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data=&#123;<span class="string">'Tom'</span>:[<span class="number">88</span>,<span class="number">55</span>],<span class="string">'John'</span>:[<span class="number">90</span>,<span class="number">22</span>]&#125;</div><div class="line">df02=DataFrame(data)</div><div class="line">df02</div></pre></td></tr></table></figure></p>
<p>   John    Tom<br>0    90    88<br>1    22    55</p>
<p>DataFrame 可以增加数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df02.ix[<span class="string">'2'</span>]=np.NaN</div></pre></td></tr></table></figure></p>
<pre><code>John    Tom
</code></pre><p>0    90.0    88.0<br>1    22.0    55.0<br>2    NaN        NaN</p>
<p>数据删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df02=df02.dropna()</div><div class="line">df02</div></pre></td></tr></table></figure></p>
<pre><code>John    Tom
</code></pre><p>0    90.0    88.0<br>1    22.0    55.0</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">arr1=np.random.randint(<span class="number">5</span>,<span class="number">10</span>,(<span class="number">4</span>,<span class="number">4</span>))</div><div class="line">df1=pd.DataFrame(arr1)</div><div class="line">df1</div><div class="line">df1.ix[:<span class="number">2</span>,<span class="number">1</span>]=np.NAN</div><div class="line">df1.ix[:<span class="number">1</span>,<span class="number">2</span>]=np.NAN</div><div class="line">df1</div></pre></td></tr></table></figure>
<pre><code>0    1    2    3
</code></pre><p>0    8    NaN    NaN    7<br>1    5    NaN    NaN    9<br>2    5    NaN    5.0    5<br>3    9    8.0    7.0    5</p>
<h3 id="loc-iloc"><a href="#loc-iloc" class="headerlink" title="loc iloc"></a>loc iloc</h3><p>iloc 对于下标进行操作<br>loc 对于索引值进行操作</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;from pandas import Series,DataFrame&lt;br&gt;import pandas as pd&lt;/p&gt;
&lt;h3 id=&quot;Series：一种类似于一维数组的对象，是由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。-索引可重复&quot;&gt;&lt;a href=&quot;#Series：一种类似于一维数组的对象，是由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。-索引可重复&quot; class=&quot;headerlink&quot; title=&quot;Series：一种类似于一维数组的对象，是由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。  索引可重复&quot;&gt;&lt;/a&gt;Series：一种类似于一维数组的对象，是由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。  索引可重复&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Series,DataFrame&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;arr = np.array([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,np.NaN,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;serises0=Series(arr)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;serises0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;0     1.0&lt;br&gt;1     3.0&lt;br&gt;2     5.0&lt;br&gt;3     NaN&lt;br&gt;4    10.0&lt;br&gt;dtype: float64&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>spark 机器学习入门(二)</title>
    <link href="http://yoursite.com/2017/10/18/spark%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/10/18/spark 性能优化/</id>
    <published>2017-10-18T06:30:00.000Z</published>
    <updated>2017-11-28T13:12:37.521Z</updated>
    
    <content type="html"><![CDATA[<h5 id="部署优化："><a href="#部署优化：" class="headerlink" title="部署优化："></a><strong>部署优化：</strong></h5><p>磁盘：<br>挂载磁盘时使用noatime和nodiratime选项减少写的开销</p>
<p>linux每个文件都会保留3个时间戳<br>用stat 文件名 来查看<br>Acess：文件访问时间<br>Modfiy：内容修改时间<br>Change：文件名修改时间</p>
<p>参数含义：<br>磁盘下的所有文件不更新访问时间<br><a id="more"></a><br>内存：<br>JVM 内存不建议每个executor 超过200G</p>
<p>CPU<br>每台机器的Vcore数不建议小于8</p>
<h2 id="JOB调度："><a href="#JOB调度：" class="headerlink" title="JOB调度："></a><strong>JOB调度：</strong></h2><p>Fail Schedule 可最大程度保证各个Job都有机会获取资源</p>
<h2 id="数据序列化："><a href="#数据序列化：" class="headerlink" title="数据序列化："></a><strong>数据序列化：</strong></h2><p>Kyro serialization序列化速度更快，结果更紧凑<br>为了更好的性能，需提前注册被序列化的类，否则会存在大量的空间浪费<br>通过spark.serializer指定</p>
<h2 id="减少内存消耗："><a href="#减少内存消耗：" class="headerlink" title="减少内存消耗："></a><strong>减少内存消耗：</strong></h2><p>尽量使用基本数据类型和数组，避免使用java集合类<br>尽量减少包含大量小对象的嵌套结构<br>Key尽量使用数值或枚举类型而不是字符串<br>RAM小于32GB时，使用-XX:+UseCompressedOops使用4字节（而非8字节）的指针</p>
<h2 id="调整并行度："><a href="#调整并行度：" class="headerlink" title="调整并行度："></a><strong>调整并行度：</strong></h2><p>调整Map侧并行度<br>对于kafka direct stream 可通过调整Topic的Patition个数调整Spark Map侧并行度<br>对于spark.textFile，通过参数调整</p>
<p>调整Reduce侧并行度<br>通过spark.default.parallelism设置shuffle时默认并行度</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;部署优化：&quot;&gt;&lt;a href=&quot;#部署优化：&quot; class=&quot;headerlink&quot; title=&quot;部署优化：&quot;&gt;&lt;/a&gt;&lt;strong&gt;部署优化：&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;磁盘：&lt;br&gt;挂载磁盘时使用noatime和nodiratime选项减少写的开销&lt;/p&gt;
&lt;p&gt;linux每个文件都会保留3个时间戳&lt;br&gt;用stat 文件名 来查看&lt;br&gt;Acess：文件访问时间&lt;br&gt;Modfiy：内容修改时间&lt;br&gt;Change：文件名修改时间&lt;/p&gt;
&lt;p&gt;参数含义：&lt;br&gt;磁盘下的所有文件不更新访问时间&lt;br&gt;
    
    </summary>
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark 机器学习入门(一)</title>
    <link href="http://yoursite.com/2017/10/18/spark%20ml1/"/>
    <id>http://yoursite.com/2017/10/18/spark ml1/</id>
    <published>2017-10-18T03:30:00.000Z</published>
    <updated>2017-10-22T11:03:05.867Z</updated>
    
    <content type="html"><![CDATA[<p>目前基于RDD的MLlib已经进入维护莫斯。大概在spark2.3基于RDD的MLlib API将要被废弃。未来是基于DataFrame的API</p>
<p>1.基本统计<br>计算两组数据之间的相关性</p>
<h3 id="皮尔森相关系数（Pearson-correlation-coefficient）"><a href="#皮尔森相关系数（Pearson-correlation-coefficient）" class="headerlink" title="皮尔森相关系数（Pearson correlation coefficient）"></a>皮尔森相关系数（Pearson correlation coefficient）</h3><p>也称皮尔森积矩相关系数(Pearson product-moment correlation coefficient) ，是一种线性相关系数。皮尔森相关系数是用来反映两个变量线性相关程度的统计量。相关系数用r表示，其中n为样本量，分别为两个变量的观测值和均值。r描述的是两个变量间线性相关强弱的程度。r的绝对值越大表明相关性越强</p>
<p><img src="http://segmentfault.com/img/cGNupC" alt="此处输入图片的描述"><br><img src="http://segmentfault.com/img/eOV3Oj" alt="此处输入图片的描述"><br><img src="http://segmentfault.com/img/lJqNL" alt="此处输入图片的描述"><br><a id="more"></a><br>按照高中数学水平来理解, 它很简单, 可以看做将两组数据首先做Z分数处理之后, 然后两组数据的乘积和除以样本数</p>
<p>Z分数一般代表正态分布中, 数据偏离中心点的距离.等于变量减掉平均数再除以标准差.(就是高考的标准分类似的处理)</p>
<p>标准差则等于变量减掉平均数的平方和,再除以样本数,最后再开方.</p>
<p>所以, 根据这个最朴素的理解,我们可以将公式依次精简为:</p>
<p><img src="http://segmentfault.com/img/bKDASK" alt="此处输入图片的描述"></p>
<p>spearman相关系数：是衡量分级定序变量之间的相关程度的统计量，对不服从正态分布的资料、原始资料等级资料、一侧开口资料、总体分布类型未知的资料不符合使用积矩相关系数来描述关联性。此时可采用秩相关（rank correlation），也称等级相关，来描述两个变量之间的关联程度与方向。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.ml.linalg.&#123;<span class="type">Matrix</span>, <span class="type">Vectors</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.ml.stat.<span class="type">Correlation</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">Row</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ml_1</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span></div><div class="line">      .builder</div><div class="line">      .master(<span class="string">"local"</span>)</div><div class="line">      .getOrCreate()</div><div class="line">    <span class="keyword">import</span> spark.implicits._</div><div class="line"></div><div class="line">    <span class="comment">// $example on$</span></div><div class="line">    <span class="keyword">val</span> data = <span class="type">Seq</span>(</div><div class="line">      <span class="type">Vectors</span>.sparse(<span class="number">4</span>, <span class="type">Seq</span>((<span class="number">0</span>, <span class="number">1.0</span>), (<span class="number">3</span>, <span class="number">-2.0</span>))),</div><div class="line">      <span class="type">Vectors</span>.dense(<span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">3.0</span>),</div><div class="line">      <span class="type">Vectors</span>.dense(<span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">0.0</span>, <span class="number">8.0</span>),</div><div class="line">      <span class="type">Vectors</span>.sparse(<span class="number">4</span>, <span class="type">Seq</span>((<span class="number">0</span>, <span class="number">9.0</span>), (<span class="number">3</span>, <span class="number">1.0</span>)))</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="keyword">val</span> df = data.map(<span class="type">Tuple1</span>.apply).toDF(<span class="string">"features"</span>)</div><div class="line">    <span class="keyword">val</span> <span class="type">Row</span>(coeff1: <span class="type">Matrix</span>) = <span class="type">Correlation</span>.corr(df, <span class="string">"features"</span>).head</div><div class="line">    println(<span class="string">"Pearson correlation matrix:\n"</span> + coeff1.toString)</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> <span class="type">Row</span>(coeff2: <span class="type">Matrix</span>) = <span class="type">Correlation</span>.corr(df, <span class="string">"features"</span>, <span class="string">"spearman"</span>).head</div><div class="line">    println(<span class="string">"Spearman correlation matrix:\n"</span> + coeff2.toString)</div><div class="line">    <span class="comment">// $example off$</span></div><div class="line"></div><div class="line">    spark.stop()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.0为第一列和第一列计算<br>0.055641488407465814为第一列和第二列计算<br>0.4004714203168137 为第三列和第四列计算</p>
<p>计算结果:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">Pearson</span> correlation matrix:</div><div class="line"><span class="number">1.0</span>                   <span class="number">0.055641488407465814</span>  <span class="type">NaN</span>  <span class="number">0.4004714203168137</span> </div><div class="line"><span class="number">0.055641488407465814</span>  <span class="number">1.0</span>                   <span class="type">NaN</span>  <span class="number">0.9135958615342522</span>  </div><div class="line"><span class="type">NaN</span>                   <span class="type">NaN</span>                   <span class="number">1.0</span>  <span class="type">NaN</span>                 </div><div class="line"><span class="number">0.4004714203168137</span>    <span class="number">0.9135958615342522</span>    <span class="type">NaN</span>  <span class="number">1.0</span>                 </div><div class="line"><span class="type">Spearman</span> correlation matrix:</div><div class="line"><span class="number">1.0</span>                  <span class="number">0.10540925533894532</span>  <span class="type">NaN</span>  <span class="number">0.40000000000000174</span>  </div><div class="line"><span class="number">0.10540925533894532</span>  <span class="number">1.0</span>                  <span class="type">NaN</span>  <span class="number">0.9486832980505141</span>   </div><div class="line"><span class="type">NaN</span>                  <span class="type">NaN</span>                  <span class="number">1.0</span>  <span class="type">NaN</span>                  </div><div class="line"><span class="number">0.40000000000000174</span>  <span class="number">0.9486832980505141</span>   <span class="type">NaN</span>  <span class="number">1.0</span></div></pre></td></tr></table></figure></p>
<h4 id="卡方检验"><a href="#卡方检验" class="headerlink" title="卡方检验"></a><strong>卡方检验</strong></h4><p>卡方检验是用途非常广的一种假设检验方法，它在分类资料统计推断中的应用，包括：两个率或两个构成比比较的卡方检验；多个率或多个构成比比较的卡方检验以及分类资料的相关分析等。<br>卡方检验就是统计样本的实际观测值与理论推断值之间的偏离程度，实际观测值与理论推断值之间的偏离程度就决定卡方值的大小，卡方值越大，越不符合；卡方值越小，偏差越小，越趋于符合，若两个值完全相等时，卡方值就为0，表明理论值完全符合。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.ml.linalg.<span class="type">Vector</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.ml.linalg.<span class="type">Vectors</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.ml.stat.<span class="type">ChiSquareTest</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Created by Administrator on 2017/10/18.</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ChiSquareTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span></div><div class="line">      .builder</div><div class="line">      .master(<span class="string">"local"</span>)</div><div class="line">      .getOrCreate()</div><div class="line">    <span class="keyword">import</span> spark.implicits._</div><div class="line"></div><div class="line">    <span class="keyword">val</span> data = <span class="type">Seq</span>(</div><div class="line">      (<span class="number">0.0</span>, <span class="type">Vectors</span>.dense(<span class="number">0.5</span>, <span class="number">10.0</span>)),</div><div class="line">      (<span class="number">0.0</span>, <span class="type">Vectors</span>.dense(<span class="number">1.5</span>, <span class="number">20.0</span>)),</div><div class="line">      (<span class="number">1.0</span>, <span class="type">Vectors</span>.dense(<span class="number">1.5</span>, <span class="number">30.0</span>)),</div><div class="line">      (<span class="number">0.0</span>, <span class="type">Vectors</span>.dense(<span class="number">3.5</span>, <span class="number">30.0</span>)),</div><div class="line">      (<span class="number">0.0</span>, <span class="type">Vectors</span>.dense(<span class="number">3.5</span>, <span class="number">40.0</span>)),</div><div class="line">      (<span class="number">1.0</span>, <span class="type">Vectors</span>.dense(<span class="number">3.5</span>, <span class="number">40.0</span>))</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="keyword">val</span> df = data.toDF(<span class="string">"label"</span>, <span class="string">"features"</span>)</div><div class="line">    <span class="keyword">val</span> chi = <span class="type">ChiSquareTest</span>.test(df, <span class="string">"features"</span>, <span class="string">"label"</span>).head</div><div class="line">    println(<span class="string">"pValues = "</span> + chi.getAs[<span class="type">Vector</span>](<span class="number">0</span>))</div><div class="line">    println(<span class="string">"degreesOfFreedom = "</span> + chi.getSeq[<span class="type">Int</span>](<span class="number">1</span>).mkString(<span class="string">"["</span>, <span class="string">","</span>, <span class="string">"]"</span>))</div><div class="line">    println(<span class="string">"statistics = "</span> + chi.getAs[<span class="type">Vector</span>](<span class="number">2</span>))</div><div class="line"></div><div class="line">    spark.stop()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pValues = [<span class="number">0.6872892787909721</span>,<span class="number">0.6822703303362126</span>]</div><div class="line">degreesOfFreedom = [<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">statistics = [<span class="number">0.75</span>,<span class="number">1.5</span>]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前基于RDD的MLlib已经进入维护莫斯。大概在spark2.3基于RDD的MLlib API将要被废弃。未来是基于DataFrame的API&lt;/p&gt;
&lt;p&gt;1.基本统计&lt;br&gt;计算两组数据之间的相关性&lt;/p&gt;
&lt;h3 id=&quot;皮尔森相关系数（Pearson-correlation-coefficient）&quot;&gt;&lt;a href=&quot;#皮尔森相关系数（Pearson-correlation-coefficient）&quot; class=&quot;headerlink&quot; title=&quot;皮尔森相关系数（Pearson correlation coefficient）&quot;&gt;&lt;/a&gt;皮尔森相关系数（Pearson correlation coefficient）&lt;/h3&gt;&lt;p&gt;也称皮尔森积矩相关系数(Pearson product-moment correlation coefficient) ，是一种线性相关系数。皮尔森相关系数是用来反映两个变量线性相关程度的统计量。相关系数用r表示，其中n为样本量，分别为两个变量的观测值和均值。r描述的是两个变量间线性相关强弱的程度。r的绝对值越大表明相关性越强&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://segmentfault.com/img/cGNupC&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://segmentfault.com/img/eOV3Oj&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://segmentfault.com/img/lJqNL&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark shuffle 调优</title>
    <link href="http://yoursite.com/2017/08/30/spark%20shuffle%20%E8%B0%83%E4%BC%98/"/>
    <id>http://yoursite.com/2017/08/30/spark shuffle 调优/</id>
    <published>2017-08-30T03:30:00.000Z</published>
    <updated>2017-09-17T12:04:23.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shuffle实现的具体过程"><a href="#shuffle实现的具体过程" class="headerlink" title="shuffle实现的具体过程"></a>shuffle实现的具体过程</h2><p>1.Spark系统在运行含shuffle过程的应用时，Executor进程除了运行task，还要负责写shuffle 数据，给其他Executor提供shuffle数据。<br>    当Executor进程任务过重，导致GC而不能为其 他Executor提供shuffle数据时，会影响任务运行。<br>    这里实际上是利用External Shuffle Service 来提升性能，External shuffle Service是长期存在于NodeManager进程中的一个辅助服务。<br>    通过该服务 来抓取shuffle数据，减少了Executor的压力，在Executor GC的时候也不会影响其他 Executor的任务运行。</p>
<p>启用方法：</p>
<h3 id="一-在NodeManager中启动External-shuffle-Service。"><a href="#一-在NodeManager中启动External-shuffle-Service。" class="headerlink" title="一. 在NodeManager中启动External shuffle Service。"></a>一. 在NodeManager中启动External shuffle Service。</h3><pre><code>a. 在“yarn-site.xml”中添加如下配置项：
&lt;property&gt;
&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;
&lt;value&gt;spark_shuffle&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
&lt;name&gt;yarn.nodemanager.aux-services.spark_shuffle.class&lt;/name&gt;
&lt;value&gt;org.apache.spark.network.yarn.YarnShuffleService&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
&lt;name&gt;spark.shuffle.service.port&lt;/name&gt;
&lt;value&gt;7337&lt;/value&gt;
&lt;/property&gt;
配置参数描述
yarn.nodemanager.aux-services  ：NodeManager中一个长期运行的辅助服务，用于提升Shuffle计算性能。
yarn.nodemanager.auxservices.spark_shuffle.class ：NodeManager中辅助服务对应的类。
spark.shuffle.service.port ：Shuffle服务监听数据获取请求的端口。可选配置，默认值为“7337”。
b. 添加依赖的jar包
拷贝“${SPARK_HOME}/lib/spark-1.3.0-yarn-shuffle.jar”到“${HADOOP_HOME}/share/hadoop/yarn/lib/”目录下。
c. 重启NodeManager进程，也就启动了External shuffle Service。
</code></pre><a id="more"></a>
<h3 id="二-Spark应用使用External-shuffle-Service。"><a href="#二-Spark应用使用External-shuffle-Service。" class="headerlink" title="二. Spark应用使用External shuffle Service。"></a>二. Spark应用使用External shuffle Service。</h3><pre><code>在“spark-defaults.conf”中必须添加如下配置项： 
    spark.shuffle.service.enabled true 
    spark.shuffle.service.port 7337 
说明 
1.如果1.如果“yarn.nodemanager.aux-services”配置项已存在，则在value中添加 “spark_shuffle”，且用逗号和其他值分开。 
2.“spark.shuffle.service.port”的值需要和上面“yarn-site.xml”中的值一样。 
配置参数描述 
spark.shuffle.service.enabled   ：NodeManager中一个长期运行的辅助服务，用于提升Shuffle 计算性能。默认为false，表示不启用该功能。 
spark.shuffle.service.port   ：Shuffle服务监听数据获取请求的端口。可选配置，默认值 为“7337”。
</code></pre><p>Hash Shuffle不足<br>map task会根据reduce的数量（partition） 生成相应的bucket 写shuffle blockFile</p>
<p>如果map 和reduce数量过多，会写很多blockFile，造成问题1：超过操作系统所能打开最大文件数，问题2：大量随机写随机读</p>
<p>解决方案：</p>
<p>1.shuffle 参数：<br>spark.shuffle.consolidateFiles  默认为false<br>如果设置为”true”，在shuffle期间，合并的中间文件将会被创建。创建更少的文件可以提供文件系统的shuffle的效 率。这些shuffle都伴随着大量递归任务。当用ext4和dfs文件系统时，推荐设置为”true”。在ext3中，因为文件系统的限制，这个选项可 能机器（大于8核）降低效率</p>
<p>2.sort shuffle<br>每个map只写到一个文件，和上面的写到reduce个数个文件不同</p>
<h2 id="不同算子影响shuffle表现形式不同"><a href="#不同算子影响shuffle表现形式不同" class="headerlink" title="不同算子影响shuffle表现形式不同"></a>不同算子影响shuffle表现形式不同</h2><p>reduceByKey(func, numPartitions=None)<br>也就是，reduceByKey用于对每个key对应的多个value进行merge操作，最重要的是它能够在本地先进行merge操作，并且merge操作可以通过函数自定义。<br><img src="http://oh6ybr0jg.bkt.clouddn.com/reduceByKey.png" alt="此处输入图片的描述"></p>
<p>groupByKey(numPartitions=None)<br>也就是，groupByKey也是对每个key进行操作，但只生成一个sequence。需要特别注意“Note”中的话，它告诉我们：如果需要对sequence进行aggregation操作（注意，groupByKey本身不能自定义操作函数），那么，选择reduceByKey/aggregateByKey更好。这是因为groupByKey不能自定义函数，我们需要先用groupByKey生成RDD，然后才能对此RDD通过map进行自定义函数操作。<br><img src="http://oh6ybr0jg.bkt.clouddn.com/groupByKey.png" alt="此处输入图片的描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;shuffle实现的具体过程&quot;&gt;&lt;a href=&quot;#shuffle实现的具体过程&quot; class=&quot;headerlink&quot; title=&quot;shuffle实现的具体过程&quot;&gt;&lt;/a&gt;shuffle实现的具体过程&lt;/h2&gt;&lt;p&gt;1.Spark系统在运行含shuffle过程的应用时，Executor进程除了运行task，还要负责写shuffle 数据，给其他Executor提供shuffle数据。&lt;br&gt;    当Executor进程任务过重，导致GC而不能为其 他Executor提供shuffle数据时，会影响任务运行。&lt;br&gt;    这里实际上是利用External Shuffle Service 来提升性能，External shuffle Service是长期存在于NodeManager进程中的一个辅助服务。&lt;br&gt;    通过该服务 来抓取shuffle数据，减少了Executor的压力，在Executor GC的时候也不会影响其他 Executor的任务运行。&lt;/p&gt;
&lt;p&gt;启用方法：&lt;/p&gt;
&lt;h3 id=&quot;一-在NodeManager中启动External-shuffle-Service。&quot;&gt;&lt;a href=&quot;#一-在NodeManager中启动External-shuffle-Service。&quot; class=&quot;headerlink&quot; title=&quot;一. 在NodeManager中启动External shuffle Service。&quot;&gt;&lt;/a&gt;一. 在NodeManager中启动External shuffle Service。&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;a. 在“yarn-site.xml”中添加如下配置项：
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.nodemanager.aux-services&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;spark_shuffle&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.nodemanager.aux-services.spark_shuffle.class&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;org.apache.spark.network.yarn.YarnShuffleService&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;spark.shuffle.service.port&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;7337&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
配置参数描述
yarn.nodemanager.aux-services  ：NodeManager中一个长期运行的辅助服务，用于提升Shuffle计算性能。
yarn.nodemanager.auxservices.spark_shuffle.class ：NodeManager中辅助服务对应的类。
spark.shuffle.service.port ：Shuffle服务监听数据获取请求的端口。可选配置，默认值为“7337”。
b. 添加依赖的jar包
拷贝“${SPARK_HOME}/lib/spark-1.3.0-yarn-shuffle.jar”到“${HADOOP_HOME}/share/hadoop/yarn/lib/”目录下。
c. 重启NodeManager进程，也就启动了External shuffle Service。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>CDH 安装spark2.2</title>
    <link href="http://yoursite.com/2017/08/05/CDH%20%E5%AE%89%E8%A3%85spark2.2/"/>
    <id>http://yoursite.com/2017/08/05/CDH 安装spark2.2/</id>
    <published>2017-08-05T03:30:00.000Z</published>
    <updated>2017-10-09T12:11:28.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h2><p><a href="https://www.cloudera.com/documentation/spark2/latest/topics/spark2_installing.html" target="_blank" rel="external">https://www.cloudera.com/documentation/spark2/latest/topics/spark2_installing.html</a></p>
<p>1.下载Spark2 CSD<br><a href="https://www.cloudera.com/documentation/spark2/latest/topics/spark2_packaging.html#packaging" target="_blank" rel="external">https://www.cloudera.com/documentation/spark2/latest/topics/spark2_packaging.html#packaging</a></p>
<p>1.1.1 CSD<br>笔者下载2.2版本<br><a href="http://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.2.0.cloudera1.jar" target="_blank" rel="external">http://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.2.0.cloudera1.jar</a><br><a id="more"></a><br>1.1.2 Parcel<br><a href="http://archive.cloudera.com/spark2/parcels/2.2.0.cloudera1/" target="_blank" rel="external">http://archive.cloudera.com/spark2/parcels/2.2.0.cloudera1/</a></p>
<p>1.1.2.1 SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354-el6.parcel<br><a href="http://archive.cloudera.com/spark2/parcels/2.2.0.cloudera1/SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354-el6.parcel" target="_blank" rel="external">http://archive.cloudera.com/spark2/parcels/2.2.0.cloudera1/SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354-el6.parcel</a></p>
<p>1.1.2.2 SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354-el7.parcel.sha1<br><a href="http://archive.cloudera.com/spark2/parcels/2.2.0.cloudera1/SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354-el6.parcel.sha1" target="_blank" rel="external">http://archive.cloudera.com/spark2/parcels/2.2.0.cloudera1/SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354-el6.parcel.sha1</a><br>然后将SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354-el7.parcel.sha1改名为<br>SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354-el7.parcel.sha</p>
<p>1.1.2.3 manifest.json<br><a href="http://archive.cloudera.com/spark2/parcels/2.2.0.cloudera1/manifest.json" target="_blank" rel="external">http://archive.cloudera.com/spark2/parcels/2.2.0.cloudera1/manifest.json</a></p>
<p>停止服务<br>/soft/bigdata/clouderamanager/cm-5.10.0/etc/init.d/cloudera-scm-server stop<br>/soft/bigdata/clouderamanager/cm-5.10.0/etc/init.d/cloudera-scm-agent stop</p>
<p>将csd文件放到<br>/soft/bigdata/clouderamanager/cloudera/csd</p>
<p>将parcel文件放到<br>/soft/bigdata/clouderamanager/cloudera/parcel-repo</p>
<p>修改权限<br>chgrp cloudera-scm SPARK2_ON_YARN-2.2.0.cloudera1.jar<br>chown cloudera-scm SPARK2_ON_YARN-2.2.0.cloudera1.jar </p>
<p>开启服务<br>/soft/bigdata/clouderamanager/cm-5.10.0/etc/init.d/cloudera-scm-server start<br>/soft/bigdata/clouderamanager/cm-5.10.0/etc/init.d/cloudera-scm-agent start</p>
<p>主机-&gt; Parcel就能看到spark2了</p>
<p>分配，激活。然后就可以添加服务了</p>
<p>如果添加服务不成功需要把jar文件放到/opt/cloudera/csd</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;官方链接&quot;&gt;&lt;a href=&quot;#官方链接&quot; class=&quot;headerlink&quot; title=&quot;官方链接&quot;&gt;&lt;/a&gt;官方链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cloudera.com/documentation/spark2/latest/topics/spark2_installing.html&quot;&gt;https://www.cloudera.com/documentation/spark2/latest/topics/spark2_installing.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.下载Spark2 CSD&lt;br&gt;&lt;a href=&quot;https://www.cloudera.com/documentation/spark2/latest/topics/spark2_packaging.html#packaging&quot;&gt;https://www.cloudera.com/documentation/spark2/latest/topics/spark2_packaging.html#packaging&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.1.1 CSD&lt;br&gt;笔者下载2.2版本&lt;br&gt;&lt;a href=&quot;http://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.2.0.cloudera1.jar&quot;&gt;http://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.2.0.cloudera1.jar&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CDH" scheme="http://yoursite.com/categories/CDH/"/>
    
    
      <category term="CDH" scheme="http://yoursite.com/tags/CDH/"/>
    
  </entry>
  
  <entry>
    <title>开源爬虫介绍</title>
    <link href="http://yoursite.com/2017/08/05/%E5%BC%80%E6%BA%90%E7%88%AC%E8%99%AB%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2017/08/05/开源爬虫介绍/</id>
    <published>2017-08-05T03:30:00.000Z</published>
    <updated>2017-10-17T11:10:37.532Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Chyroc/WechatSogou" target="_blank" rel="external">https://github.com/Chyroc/WechatSogou</a></p>
<p> 微信公众号爬虫。基于搜狗微信搜索的微信公众号爬虫接口，可以扩展成基于搜狗搜索的爬虫，返回结果是列表，每一项均是公众号具体信息字典。</p>
<p> <a href="https://github.com/lanbing510/DouBanSpider" target="_blank" rel="external">https://github.com/lanbing510/DouBanSpider</a><br> 豆瓣读书爬虫。可以爬下豆瓣读书标签下的所有图书，按评分排名依次存储，存储到Excel中，可方便大家筛选搜罗，比如筛选评价人数&gt;1000的高分书籍；可依据不同的主题存储到Excel不同的Sheet ，采用User Agent伪装为浏览器进行爬取，并加入随机延时来更好的模仿浏览器行为，避免爬虫被封。</p>
<p><a href="https://github.com/LiuRoy/zhihu_spider" target="_blank" rel="external">https://github.com/LiuRoy/zhihu_spider</a><br>知乎爬虫。此项目的功能是爬取知乎用户信息以及人际拓扑关系，爬虫框架使用scrapy，数据存储使用mongo</p>
<p><a href="https://github.com/airingursb/bilibili-user" target="_blank" rel="external">https://github.com/airingursb/bilibili-user</a><br>Bilibili用户爬虫。总数据数：20119918，抓取字段：用户id，昵称，性别，头像，等级，经验值，粉丝数，生日，地址，注册时间，签名，等级与经验值等。抓取之后生成B站用户数据报告。<br><a id="more"></a></p>
<p><a href="https://github.com/LiuXingMing/SinaSpider" target="_blank" rel="external">https://github.com/LiuXingMing/SinaSpider</a><br>新浪微博爬虫。主要爬取新浪微博用户的个人信息、微博信息、粉丝和关注。代码获取新浪微博Cookie进行登录，可通过多账号登录来防止新浪的反扒。主要使用 scrapy 爬虫框架</p>
<p><a href="https://github.com/gnemoug/distribute_crawler" target="_blank" rel="external">https://github.com/gnemoug/distribute_crawler</a><br>小说下载分布式爬虫。使用scrapy,Redis, MongoDB,graphite实现的一个分布式网络爬虫,底层存储mongodb集群,分布式使用redis实现,爬虫状态显示使用graphite实现，主要针对一个小说站点。</p>
<p><a href="https://github.com/yanzhou/CnkiSpider" target="_blank" rel="external">https://github.com/yanzhou/CnkiSpider</a><br>中国知网爬虫。设置检索条件后，执行src/CnkiSpider.py抓取数据，抓取数据存储在/data目录下，每个数据文件的第一行为字段名称。</p>
<p><a href="https://github.com/lanbing510/LianJiaSpider" target="_blank" rel="external">https://github.com/lanbing510/LianJiaSpider</a><br>链家网爬虫。爬取北京地区链家历年二手房成交记录。涵盖链家爬虫一文的全部代码，包括链家模拟登录代码。</p>
<p><a href="https://github.com/taizilongxu/scrapy_jingdong" target="_blank" rel="external">https://github.com/taizilongxu/scrapy_jingdong</a><br>京东爬虫。基于scrapy的京东网站爬虫，保存格式为csv。</p>
<p><a href="https://github.com/caspartse/QQ-Groups-Spider" target="_blank" rel="external">https://github.com/caspartse/QQ-Groups-Spider</a><br>QQ 群爬虫。批量抓取 QQ 群信息，包括群名称、群号、群人数、群主、群简介等内容，最终生成 XLS(X) / CSV 结果文件。</p>
<p><a href="https://github.com/hanc00l/wooyun_public" target="_blank" rel="external">https://github.com/hanc00l/wooyun_public</a><br>乌云爬虫。 乌云公开漏洞、知识库爬虫和搜索。全部公开漏洞的列表和每个漏洞的文本内容存在mongodb中，大概约2G内容；如果整站爬全部文本和图片作为离线查询，大概需要10G空间、2小时（10M电信带宽）；爬取全部知识库，总共约500M空间。漏洞搜索使用了Flask作为web server，bootstrap作为前端。</p>
<p><a href="https://github.com/fankcoder/findtrip" target="_blank" rel="external">https://github.com/fankcoder/findtrip</a><br>机票爬虫（去哪儿和携程网）。Findtrip是一个基于Scrapy的机票爬虫，目前整合了国内两大机票网站（去哪儿 + 携程）。</p>
<p><a href="https://github.com/leyle/163spider" target="_blank" rel="external">https://github.com/leyle/163spider</a><br>基于requests、MySQLdb、torndb的网易客户端内容爬虫</p>
<p><a href="https://github.com/fanpei91/doubanspiders" target="_blank" rel="external">https://github.com/fanpei91/doubanspiders</a><br>豆瓣电影、书籍、小组、相册、东西等爬虫集</p>
<p><a href="https://github.com/LiuXingMing/QQSpider" target="_blank" rel="external">https://github.com/LiuXingMing/QQSpider</a><br>QQ空间爬虫，包括日志、说说、个人信息等，一天可抓取 400 万条数据。</p>
<p><a href="https://github.com/Shu-Ji/baidu-music-spider" target="_blank" rel="external">https://github.com/Shu-Ji/baidu-music-spider</a><br>百度mp3全站爬虫，使用redis支持断点续传。</p>
<p><a href="https://github.com/pakoo/tbcrawler" target="_blank" rel="external">https://github.com/pakoo/tbcrawler</a><br>淘宝和天猫的爬虫,可以根据搜索关键词,物品id来抓去页面的信息，数据存储在mongodb。</p>
<p><a href="https://github.com/benitoro/stockholm" target="_blank" rel="external">https://github.com/benitoro/stockholm</a><br>一个股票数据（沪深）爬虫和选股策略测试框架。根据选定的日期范围抓取所有沪深两市股票的行情数据。支持使用表达式定义选股策略。支持多线程处理。保存数据到JSON文件、CSV文件。</p>
<p><a href="https://github.com/k1995/BaiduyunSpider" target="_blank" rel="external">https://github.com/k1995/BaiduyunSpider</a><br>百度云盘爬虫</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/Chyroc/WechatSogou&quot;&gt;https://github.com/Chyroc/WechatSogou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 微信公众号爬虫。基于搜狗微信搜索的微信公众号爬虫接口，可以扩展成基于搜狗搜索的爬虫，返回结果是列表，每一项均是公众号具体信息字典。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/lanbing510/DouBanSpider&quot;&gt;https://github.com/lanbing510/DouBanSpider&lt;/a&gt;&lt;br&gt; 豆瓣读书爬虫。可以爬下豆瓣读书标签下的所有图书，按评分排名依次存储，存储到Excel中，可方便大家筛选搜罗，比如筛选评价人数&amp;gt;1000的高分书籍；可依据不同的主题存储到Excel不同的Sheet ，采用User Agent伪装为浏览器进行爬取，并加入随机延时来更好的模仿浏览器行为，避免爬虫被封。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/LiuRoy/zhihu_spider&quot;&gt;https://github.com/LiuRoy/zhihu_spider&lt;/a&gt;&lt;br&gt;知乎爬虫。此项目的功能是爬取知乎用户信息以及人际拓扑关系，爬虫框架使用scrapy，数据存储使用mongo&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/airingursb/bilibili-user&quot;&gt;https://github.com/airingursb/bilibili-user&lt;/a&gt;&lt;br&gt;Bilibili用户爬虫。总数据数：20119918，抓取字段：用户id，昵称，性别，头像，等级，经验值，粉丝数，生日，地址，注册时间，签名，等级与经验值等。抓取之后生成B站用户数据报告。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>spark 2.2.0源码编译</title>
    <link href="http://yoursite.com/2017/08/02/spark%202.2.0%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>http://yoursite.com/2017/08/02/spark 2.2.0源码编译/</id>
    <published>2017-08-02T03:30:00.000Z</published>
    <updated>2017-08-13T05:14:38.067Z</updated>
    
    <content type="html"><![CDATA[<p>官网下载spark源码<br><a href="https://d3kbcqa49mib13.cloudfront.net/spark-2.2.0.tgz" target="_blank" rel="external">https://d3kbcqa49mib13.cloudfront.net/spark-2.2.0.tgz</a><br><img src="http://oh6ybr0jg.bkt.clouddn.com/spark-source-download.png" alt="此处输入图片的描述"></p>
<p>然后在idea中导入spark源码项目(idea maven配置正确)，然后对spark项目build。Build成功后在进行编译。<br>Build过程中遇到问题：</p>
<p>找不到org.apache.spark.streaming.flume.sink.SparkFlumeProtocol<br><img src="http://oh6ybr0jg.bkt.clouddn.com/spark-idea-build-problem.png" alt="此处输入图片的描述"><br><img src="http://oh6ybr0jg.bkt.clouddn.com/spark-idea-build-problem2.png" alt="此处输入图片的描述"><br>找不到org.apache.spark.sql.catalyst.parser.SqlBaseParser<br><img src="http://oh6ybr0jg.bkt.clouddn.com/spark-idea-build-problem3.png" alt="此处输入图片的描述"><br><img src="http://oh6ybr0jg.bkt.clouddn.com/spark-idea-build-problem4.png" alt="此处输入图片的描述"></p>
<p>设置maven的参数，否则一直出现outofMemory<br>在apache-maven-3.3.9-bin\bin下面的mvn.cmd文件里的：<br>@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000<br>下面添加<br>set MAVEN_OPTS= -Xmx2g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m</p>
<p>在git bash 里编译<br>进入spark源码目录<br>mvn -Pyarn -Phadoop-2.7 -Dhadoop.version=2.7.3 -DskipTests clean package</p>
<p><img src="http://oh6ybr0jg.bkt.clouddn.com/spark-idea-build-success.png" alt="此处输入图片的描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官网下载spark源码&lt;br&gt;&lt;a href=&quot;https://d3kbcqa49mib13.cloudfront.net/spark-2.2.0.tgz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://d3kbcqa49mib13.clou
    
    </summary>
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>使用Ambari安装部署Spark集群</title>
    <link href="http://yoursite.com/2017/06/30/%E4%BD%BF%E7%94%A8Ambari%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Spark%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2017/06/30/使用Ambari安装部署Spark集群/</id>
    <published>2017-06-30T03:30:00.000Z</published>
    <updated>2017-09-03T09:42:14.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>进入官网，选择产品里面的下载页面或者直接登录<br><a href="https://hortonworks.com/downloads/" target="_blank" rel="external">https://hortonworks.com/downloads/</a><br>选择<br>HDP® 2.6: Ready for the enterprise<br>下面的<br>Automated Install Guide</p>
<p>因为博主是CENTOS 7<br>在这个页面直接选择：<br>RHEL/CentOS/Oracle Linux 7</p>
<p>wget  <a href="http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.5.0.3/ambari.repo" target="_blank" rel="external">http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.5.0.3/ambari.repo</a> -O /etc/yum.repos.d/ambari.repo<br>yum repolist</p>
<p>yum install ambari-server</p>
<p>进入​Setup Options<br>ambari-server setup –j /usr/java/default<br>提示参数只能是一个，看来jdk要后设置</p>
<p>ambari-server setup<br>各种回车，jdk的时候选择安装1.8的<br>如果输入自定义的jdk要注意权限问题</p>
<h2 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h2><p>ambari-server start</p>
<p>查看：<br>[root@storm01 storm]# lsof -i:8080<br>COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME<br>java    7648 storm 1438u  IPv6 124470      0t0  TCP *:webcache (LISTEN)</p>
<p>关闭防火墙<br>systemctl disable firewalld.service<br>systemctl stop firewalld.service    </p>
<a id="more"></a>
<h2 id="在浏览器输入http-storm01-8080即可进入UI"><a href="#在浏览器输入http-storm01-8080即可进入UI" class="headerlink" title="在浏览器输入http://storm01:8080即可进入UI"></a>在浏览器输入<a href="http://storm01:8080即可进入UI" target="_blank" rel="external">http://storm01:8080即可进入UI</a></h2><p>用户密码都为admin</p>
<p>在每个机器上安装agent<br>yum install -y ambari-agent</p>
<p>修改配置文件<br> vi /etc/ambari-agent/conf/ambari-agent.ini<br> hostname=localhost更改为<br> hostname=storm01</p>
<p> 启动agent<br> service ambari-agent start</p>
<h2 id="设置hive"><a href="#设置hive" class="headerlink" title="设置hive"></a>设置hive</h2><p>用户密码都为hive</p>
<p>需要PostgreSQL支持远程连接<br>find / -name pg_hba.conf</p>
<p>vi /var/lib/pgsql/data/pg_hba.conf<br>将<br>local   all   postgres                                     peer改成<br>local   all   postgres                                     trust<br>host    all   postgres             127.0.0.1/32            ident改成<br>host    all   postgres             127.0.0.1/32            trust<br>local  all  ambari,mapred md5改成<br>local  all  ambari,mapred,hive trust<br>host  all   ambari,mapred 0.0.0.0/0  md5改成<br>host  all   ambari,mapred,hive 0.0.0.0/0  md5<br>host  all   ambari,mapred ::/0 md5改成<br>host  all   ambari,mapred,hive ::/0 md5</p>
<p>重启数据库<br>service postgresql restart</p>
<h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>lsof -i:5432</p>
<p>去仓库下载postgresql</p>
<p><a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a></p>
<p>下载</p>
<p>PostgreSQL JDBC Driver JDBC 4.2<br>的<br>9.2-1002-jdbc4</p>
<p>或者直接输入：<br>wget <a href="http://central.maven.org/maven2/org/postgresql/postgresql/9.2-1002-jdbc4/postgresql-9.2-1002-jdbc4.jar" target="_blank" rel="external">http://central.maven.org/maven2/org/postgresql/postgresql/9.2-1002-jdbc4/postgresql-9.2-1002-jdbc4.jar</a></p>
<p>ambari-server setup –jdbc-db=postgres –jdbc-driver=/root/postgresql-9.2-1002-jdbc4.jar</p>
<p>创建用户<br>psql -U postgres -d postgres<br>create user hive;<br>alter user hive password ‘hive’;<br>create database hive;<br>grant all on database hive to hive;<br>alter database hive owner to hive;</p>
<p>此时test ConnectionConnection 就可以测试成功</p>
<p>设置Ambari Metrics和Smart Sense用户密码都为admin</p>
<p><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariInstallOptions.png" alt="此处输入图片的描述"><br><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariConfirmHostsing.png" alt="此处输入图片的描述"><br>如果发现失败，需要设置/etc/hosts文件<br>192.168.247.180    spark01<br>192.168.247.181    spark02<br>192.168.247.182    spark03</p>
<p><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariConfirmHosts.png" alt="此处输入图片的描述"><br><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariChooseServices1.png" alt="此处输入图片的描述"><br><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariChooseServices2.png" alt="此处输入图片的描述"><br><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariAssignMasters.png" alt="此处输入图片的描述"><br><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariAssignSlavesandClients.png" alt="此处输入图片的描述"><br><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariCustomize1.png" alt="此处输入图片的描述"><br><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariCustomize2.png" alt="此处输入图片的描述"><br><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariCustomize3.png" alt="此处输入图片的描述"></p>
<p>安装完成<br><img src="http://oh6ybr0jg.bkt.clouddn.com/AmbariInstallSuccess.png" alt="此处输入图片的描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;进入官网，选择产品里面的下载页面或者直接登录&lt;br&gt;&lt;a href=&quot;https://hortonworks.com/downloads/&quot;&gt;https://hortonworks.com/downloads/&lt;/a&gt;&lt;br&gt;选择&lt;br&gt;HDP® 2.6: Ready for the enterprise&lt;br&gt;下面的&lt;br&gt;Automated Install Guide&lt;/p&gt;
&lt;p&gt;因为博主是CENTOS 7&lt;br&gt;在这个页面直接选择：&lt;br&gt;RHEL/CentOS/Oracle Linux 7&lt;/p&gt;
&lt;p&gt;wget  &lt;a href=&quot;http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.5.0.3/ambari.repo&quot;&gt;http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.5.0.3/ambari.repo&lt;/a&gt; -O /etc/yum.repos.d/ambari.repo&lt;br&gt;yum repolist&lt;/p&gt;
&lt;p&gt;yum install ambari-server&lt;/p&gt;
&lt;p&gt;进入​Setup Options&lt;br&gt;ambari-server setup –j /usr/java/default&lt;br&gt;提示参数只能是一个，看来jdk要后设置&lt;/p&gt;
&lt;p&gt;ambari-server setup&lt;br&gt;各种回车，jdk的时候选择安装1.8的&lt;br&gt;如果输入自定义的jdk要注意权限问题&lt;/p&gt;
&lt;h2 id=&quot;启动：&quot;&gt;&lt;a href=&quot;#启动：&quot; class=&quot;headerlink&quot; title=&quot;启动：&quot;&gt;&lt;/a&gt;启动：&lt;/h2&gt;&lt;p&gt;ambari-server start&lt;/p&gt;
&lt;p&gt;查看：&lt;br&gt;[root@storm01 storm]# lsof -i:8080&lt;br&gt;COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME&lt;br&gt;java    7648 storm 1438u  IPv6 124470      0t0  TCP *:webcache (LISTEN)&lt;/p&gt;
&lt;p&gt;关闭防火墙&lt;br&gt;systemctl disable firewalld.service&lt;br&gt;systemctl stop firewalld.service    &lt;/p&gt;
    
    </summary>
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>phoenix创建二级索引</title>
    <link href="http://yoursite.com/2017/05/25/phoenix%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2017/05/25/phoenix创建二级索引/</id>
    <published>2017-05-25T03:30:00.000Z</published>
    <updated>2018-07-25T16:09:11.784Z</updated>
    
    <content type="html"><![CDATA[<h3 id="索引分为两种："><a href="#索引分为两种：" class="headerlink" title="索引分为两种："></a>索引分为两种：</h3><p>Global Indexing<br>Local Indexing</p>
<h4 id="Global-Indexing-："><a href="#Global-Indexing-：" class="headerlink" title="Global Indexing ："></a>Global Indexing ：</h4><p>使用于读多，写少的场景.select 查出来的数据必须是索引字段才能使用到索引</p>
<h4 id="Local-Indexing-："><a href="#Local-Indexing-：" class="headerlink" title="Local Indexing ："></a>Local Indexing ：</h4><h4 id="hbase-bulk-load"><a href="#hbase-bulk-load" class="headerlink" title="hbase bulk load"></a>hbase bulk load</h4><p>数据上传到hdfs：/phoenix_data/fanpu.csv</p>
<p>HADOOP_CLASSPATH=$(hbase classpath) hadoop jar phoenix-4.8.0-cdh5.8.0-client.jar org.apache.phoenix.mapreduce.CsvBulkLoadTool<br>-libjars /soft/phoenix/phoenix-4.8.0-cdh5.8.0/lib/commons-csv-1.0.jar,/soft/bigdata/clouderamanager/cm-5.10.0/share/cmf/lib/joda-time-2.7.jar –table fanpu –input /phoenix_data/fanpu.csv</p>
<h4 id="我如果使用Global-Indexing："><a href="#我如果使用Global-Indexing：" class="headerlink" title="我如果使用Global Indexing："></a>我如果使用Global Indexing：</h4><p>创建索引：<br>create index fanpu_index on fanpu (“family”.”id_no”,”family”.”name”,”family”.”mobile”);</p>
<p>select <em> from fanpu where “family”.”id_no”=’xxxx’ and “family”.”name”=’马文学’ and “family”.”mobile”=’xxxx’; 是不能使用索引的<em>*×</em></em></p>
<p>select “family”.”id_no”,”family”.”name” from fanpu where “family”.”id_no”=’xxxx’ and “family”.”name”=’马文学’ and “family”.”mobile”=’xxxx’;  才可以<strong>√</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">0: jdbc:phoenix:slave1:2181&gt; create index my_index_LEN_LENDER_LOAN_DTL on &quot;LENDER-LEN_LENDER_LOAN_DTL&quot; (&quot;family&quot;.&quot;LOAN_RECEIPT_NO&quot;);</div><div class="line">76,392 rows affected (6.256 seconds)</div><div class="line">0: jdbc:phoenix:slave1:2181&gt; create index my_index_LEN_TRANSFER on &quot;LENDER-LEN_TRANSFER&quot; (&quot;family&quot;.&quot;LEN_LOAN_SELL_CONFIRM_ID&quot;);</div><div class="line">99,937 rows affected (6.256 seconds)</div><div class="line">0: jdbc:phoenix:slave1:2181&gt; create index my_index_LEN_TRANSFER_DTL on &quot;LENDER-LEN_TRANSFER_DTL&quot; (&quot;family&quot;.&quot;LENDERINFOID&quot;,&quot;family&quot;.&quot;LOAN_TRANSFER_MODEL_ID&quot;);</div><div class="line">153,029 rows affected (6.239 seconds)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">0: jdbc:phoenix:slave1:2181&gt; create index my_index_LEN_LENDER_LOAN_DTL2 on &quot;LENDER-LEN_LENDER_LOAN_DTL&quot; (&quot;family&quot;.&quot;LOAN_RECEIPT_NO&quot;);</div><div class="line">76,392 rows affected (6.231 seconds)</div><div class="line">0: jdbc:phoenix:slave1:2181&gt; create index my_index_LEN_LENDER_LOAN_DTL3 on &quot;LENDER-LEN_LENDER_LOAN_DTL&quot; (&quot;family&quot;.&quot;LOAN_ID&quot;);</div><div class="line">76,392 rows affected (6.234 seconds)</div><div class="line">0: jdbc:phoenix:slave1:2181&gt; create index my_index_LEN_LOAN_MAIN on &quot;LENDER-LEN_LOAN_MAIN&quot; (&quot;family&quot;.&quot;ASSUME_DEBTOR_ID&quot;);</div><div class="line">20,865 rows affected (6.233 seconds)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">0: jdbc:phoenix:slave1:2181&gt; create index my_index_LEN_LOAN_MAIN2 on &quot;LENDER-LEN_LOAN_MAIN&quot; (&quot;family&quot;.&quot;LOAN_CONTRACT_ID&quot;);</div><div class="line">20,865 rows affected (6.231 seconds)</div><div class="line">0: jdbc:phoenix:slave1:2181&gt; create index my_index_LEN_LENDER_INFO on &quot;LENDER-LEN_LENDER_INFO&quot; (&quot;family&quot;.&quot;CUSTOMER_ID&quot;);</div><div class="line">17,053 rows affected (6.235 seconds)</div></pre></td></tr></table></figure>
<p>0: jdbc:phoenix:slave1:2181&gt; create index my_index_LEN_SELL_CONFIRM on “LENDER-LEN_SELL_CONFIRM” (“ID”);<br>9,417 rows affected (6.245 seconds)</p>
<p>0: jdbc:phoenix:slave1:2181&gt; create index my_index_LEN_TRANSFER3 on “LENDER-LEN_TRANSFER” (“family”.”SELLER_LOAN_DTL_ID”);<br>99,937 rows affected (6.251 seconds)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;索引分为两种：&quot;&gt;&lt;a href=&quot;#索引分为两种：&quot; class=&quot;headerlink&quot; title=&quot;索引分为两种：&quot;&gt;&lt;/a&gt;索引分为两种：&lt;/h3&gt;&lt;p&gt;Global Indexing&lt;br&gt;Local Indexing&lt;/p&gt;
&lt;h4 id=&quot;Glob
    
    </summary>
    
      <category term="phoenix" scheme="http://yoursite.com/categories/phoenix/"/>
    
    
      <category term="phoenix" scheme="http://yoursite.com/tags/phoenix/"/>
    
  </entry>
  
  <entry>
    <title>CDH oozie</title>
    <link href="http://yoursite.com/2017/05/18/CDH%20oozie%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2017/05/18/CDH oozie安装/</id>
    <published>2017-05-18T03:30:00.000Z</published>
    <updated>2017-06-23T00:27:18.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装完oozie，打开UI"><a href="#安装完oozie，打开UI" class="headerlink" title="安装完oozie，打开UI:"></a>安装完oozie，打开UI:</h2><p><a href="http://master1:11000/oozie/" target="_blank" rel="external">http://master1:11000/oozie/</a></p>
<p>显示Oozie web console is disabled.<br>解决方案;<br>原因是oozie的/var/lib/oozie目录里缺少EXT的包</p>
<p>点击Documentation链接里quickstart给出了解决方案<br>Download ExtJS library (it must be version 2.2)<br><a id="more"></a></p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="http://dev.sencha.com/deploy/ext-2.2.zip" target="_blank" rel="external">http://dev.sencha.com/deploy/ext-2.2.zip</a></p>
<p>如果下载不下来可以试试CSDN<br><a href="http://download.csdn.net/download/start_baby/6280675" target="_blank" rel="external">http://download.csdn.net/download/start_baby/6280675</a><br>或者：<br><a href="http://archive.cloudera.com/gplextras/misc/ext-2.2.zip" target="_blank" rel="external">http://archive.cloudera.com/gplextras/misc/ext-2.2.zip</a></p>
<h2 id="unzip解压"><a href="#unzip解压" class="headerlink" title="unzip解压"></a>unzip解压</h2><p>然后刷新页面成功进入oozie的web界面</p>
<h2 id="编写job-properties（nameNode要当时active的）"><a href="#编写job-properties（nameNode要当时active的）" class="headerlink" title="编写job.properties（nameNode要当时active的）"></a>编写job.properties（nameNode要当时active的）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">nameNode=hdfs://master2:8020</div><div class="line">jobTracker=master2:8032</div><div class="line">queueName=default</div><div class="line">examplesRoot=user/oozie/my-apps/shell</div><div class="line">oozie.wf.application.path=$&#123;nameNode&#125;/$&#123;examplesRoot&#125;/workflow.xml</div><div class="line">EXEC=emp-join-demp.sh</div></pre></td></tr></table></figure>
<h2 id="编写workflow-xml"><a href="#编写workflow-xml" class="headerlink" title="编写workflow.xml"></a>编写workflow.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;workflow-app xmlns=&quot;uri:oozie:workflow:0.4&quot; name=&quot;shell-wf&quot;&gt;</div><div class="line"> &lt;start to=&quot;shell-node&quot;/&gt;</div><div class="line"> &lt;action name=&quot;shell-node&quot;&gt;</div><div class="line">     &lt;shell xmlns=&quot;uri:oozie:shell-action:0.2&quot;&gt;</div><div class="line">         &lt;job-tracker&gt;$&#123;jobTracker&#125;&lt;/job-tracker&gt;</div><div class="line">         &lt;name-node&gt;$&#123;nameNode&#125;&lt;/name-node&gt;</div><div class="line">         &lt;configuration&gt;</div><div class="line">             &lt;property&gt;</div><div class="line">                 &lt;name&gt;mapred.job.queue.name&lt;/name&gt;</div><div class="line">                 &lt;value&gt;$&#123;queueName&#125;&lt;/value&gt;</div><div class="line">             &lt;/property&gt;</div><div class="line">         &lt;/configuration&gt;</div><div class="line">         &lt;exec&gt;$&#123;EXEC&#125;&lt;/exec&gt;</div><div class="line">         &lt;file&gt;$&#123;nameNode&#125;/$&#123;examplesRoot&#125;/$&#123;EXEC&#125;#$&#123;EXEC&#125;&lt;/file&gt; &lt;!--Copy the executable to compute node&apos;s current working directory --&gt;</div><div class="line">     &lt;/shell&gt;</div><div class="line">     &lt;ok to=&quot;end&quot;/&gt;</div><div class="line">     &lt;error to=&quot;fail&quot;/&gt;</div><div class="line"> &lt;/action&gt;</div><div class="line"> &lt;kill name=&quot;fail&quot;&gt;</div><div class="line">     &lt;message&gt;Shell action failed, error message[$&#123;wf:errorMessage(wf:lastErrorNode())&#125;]&lt;/message&gt;</div><div class="line"> &lt;/kill&gt;</div><div class="line"> &lt;end name=&quot;end&quot;/&gt;</div><div class="line">&lt;/workflow-app&gt;</div></pre></td></tr></table></figure>
<h2 id="编写emp-join-demp-sh"><a href="#编写emp-join-demp-sh" class="headerlink" title="编写emp-join-demp.sh"></a>编写emp-join-demp.sh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">java -cp PhoenixAPI-1.0-SNAPSHOT.jar com.zwjf.Month</div></pre></td></tr></table></figure>
<p>[hdfs@master1 data]$ hadoop fs -mkdir -p /user/oozie/my-apps/shell<br>[hdfs@master1 data]$ hadoop fs -put workflow.xml /user/oozie/my-apps/shell<br>[hdfs@master1 data]$ hadoop fs -put emp-join-demp.sh /user/oozie/my-apps/shell</p>
<h2 id="上传我shell脚本里执行的jar包，你们根据自己的shell决定如何操作"><a href="#上传我shell脚本里执行的jar包，你们根据自己的shell决定如何操作" class="headerlink" title="上传我shell脚本里执行的jar包，你们根据自己的shell决定如何操作"></a>上传我shell脚本里执行的jar包，你们根据自己的shell决定如何操作</h2><p>hadoop fs -put PhoenixAPI-1.0-SNAPSHOT.jar /user/oozie/my-apps/shell</p>
<p>[hdfs@master1 data]$ /soft/bigdata/clouderamanager/cloudera/parcels/CDH-5.10.0-1.cdh5.10.0.p0.41/bin/oozie  job -oozie <a href="http://master1:11000/oozie" target="_blank" rel="external">http://master1:11000/oozie</a>  -config /soft/data/job.properties -run </p>
<h2 id="提交出错："><a href="#提交出错：" class="headerlink" title="提交出错："></a>提交出错：</h2><p>去历史服务器查看问题<br><a href="http://master2:19888/jobhistory" target="_blank" rel="external">http://master2:19888/jobhistory</a></p>
<h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><p>Launcher ERROR, reason: Main class [org.apache.oozie.action.hadoop.ShellMain], exit code [1]</p>
<p>是因为分发的时候找不到用户的jar包，在workflow.xml的</p>
<file>${nameNode}/${examplesRoot}/${EXEC}#${EXEC}</file><br>添加你的jar包并上传hdfs就可以<br>## 例如：<br><file>${nameNode}/${examplesRoot}/PhoenixAPI-1.0-SNAPSHOT.jar#PhoenixAPI-1.0-SNAPSHOT.jar</file>


<h2 id="可参考如下文章"><a href="#可参考如下文章" class="headerlink" title="可参考如下文章"></a>可参考如下文章</h2><p><a href="http://blog.sina.com.cn/s/blog_e699b42b0102xh3o.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_e699b42b0102xh3o.html</a></p>
<h2 id="增加定时任务"><a href="#增加定时任务" class="headerlink" title="增加定时任务"></a>增加定时任务</h2><p>job.properties增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">oozie.coord.application.path=$&#123;nameNode&#125;/$&#123;examplesRoot&#125;/coordinator.xml</div><div class="line">start=2017-05-18T16:30Z</div><div class="line">end=2019-07-30T16:00Z</div></pre></td></tr></table></figure></p>
<p>oozie.wf.application.path=${nameNode}/${examplesRoot}/workflow.xml<br>改成<br>workflowAppUri=${nameNode}/${examplesRoot}/workflow.xml</p>
<h2 id="新建coordinator-xml"><a href="#新建coordinator-xml" class="headerlink" title="新建coordinator.xml"></a>新建coordinator.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;coordinator-app name=&quot;coordinator&quot; frequency=&quot;$&#123;coord:minutes(10)&#125;&quot; start=&quot;$&#123;start&#125;&quot; end=&quot;$&#123;end&#125;&quot; timezone=&quot;Asia/Shanghai&quot; xmlns=&quot;uri:oozie:coordinator:0.2&quot;&gt;</div><div class="line">  &lt;action&gt;</div><div class="line">    &lt;workflow&gt;</div><div class="line">      &lt;app-path&gt;$&#123;workflowAppUri&#125;&lt;/app-path&gt;</div><div class="line">      &lt;configuration&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">          &lt;name&gt;jobTracker&lt;/name&gt;</div><div class="line">          &lt;value&gt;$&#123;jobTracker&#125;&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">          &lt;name&gt;EXEC&lt;/name&gt;</div><div class="line">          &lt;value&gt;$&#123;EXEC&#125;&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">          &lt;name&gt;nameNode&lt;/name&gt;</div><div class="line">          &lt;value&gt;$&#123;nameNode&#125;&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">          &lt;name&gt;queueName&lt;/name&gt;</div><div class="line">          &lt;value&gt;$&#123;queueName&#125;&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">      &lt;/configuration&gt;</div><div class="line">    &lt;/workflow&gt;</div><div class="line">  &lt;/action&gt;</div><div class="line">&lt;/coordinator-app&gt;</div></pre></td></tr></table></figure>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>hadoop fs -put coordinator.xml /user/oozie/my-apps/shell</p>
<h2 id="停止任务："><a href="#停止任务：" class="headerlink" title="停止任务："></a>停止任务：</h2><p>/soft/bigdata/clouderamanager/cloudera/parcels/CDH-5.10.0-1.cdh5.10.0.p0.41/bin/oozie  job -oozie <a href="http://master1:11000/oozie" target="_blank" rel="external">http://master1:11000/oozie</a>  -kill 0000005-170518154227460-oozie-oozi-C</p>
<p>注：设置的时间不能小于当前时间，否则会把之前没执行的都执行</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装完oozie，打开UI&quot;&gt;&lt;a href=&quot;#安装完oozie，打开UI&quot; class=&quot;headerlink&quot; title=&quot;安装完oozie，打开UI:&quot;&gt;&lt;/a&gt;安装完oozie，打开UI:&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://master1:11000/oozie/&quot;&gt;http://master1:11000/oozie/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示Oozie web console is disabled.&lt;br&gt;解决方案;&lt;br&gt;原因是oozie的/var/lib/oozie目录里缺少EXT的包&lt;/p&gt;
&lt;p&gt;点击Documentation链接里quickstart给出了解决方案&lt;br&gt;Download ExtJS library (it must be version 2.2)&lt;br&gt;
    
    </summary>
    
      <category term="CDH" scheme="http://yoursite.com/categories/CDH/"/>
    
    
      <category term="CDH" scheme="http://yoursite.com/tags/CDH/"/>
    
  </entry>
  
  <entry>
    <title>kafka源码阅读2</title>
    <link href="http://yoursite.com/2017/05/08/kafka%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB2/"/>
    <id>http://yoursite.com/2017/05/08/kafka源码阅读2/</id>
    <published>2017-05-08T03:30:00.000Z</published>
    <updated>2017-08-13T06:04:53.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入IDEA即可看kafka源码："><a href="#导入IDEA即可看kafka源码：" class="headerlink" title="导入IDEA即可看kafka源码："></a>导入IDEA即可看kafka源码：</h2><h2 id="启动之前需要安装zookeeper"><a href="#启动之前需要安装zookeeper" class="headerlink" title="启动之前需要安装zookeeper"></a>启动之前需要安装zookeeper</h2><p>地址：<br><a href="http://apache.fayea.com/zookeeper/" target="_blank" rel="external">http://apache.fayea.com/zookeeper/</a><br><a href="http://apache.fayea.com/zookeeper/zookeeper-3.3.6/zookeeper-3.3.6.tar.gz" target="_blank" rel="external">http://apache.fayea.com/zookeeper/zookeeper-3.3.6/zookeeper-3.3.6.tar.gz</a></p>
<h2 id="解压后再当前目录增加"><a href="#解压后再当前目录增加" class="headerlink" title="解压后再当前目录增加"></a>解压后再当前目录增加</h2><p>dataLogDir和data目录<br>复制一份配置文件<br>改名为zoo.cfg<br>修改配置文件：<br>zoo.cfg<br>修改并增加<br>dataDir=D:\tool\zookeeper-3.4.6\data<br>dataLogDir=D:\tool\zookeeper-3.4.6\dataLogDir</p>
<h2 id="启动zkServer-cmd"><a href="#启动zkServer-cmd" class="headerlink" title="启动zkServer.cmd"></a>启动zkServer.cmd</h2><a id="more"></a>
<p><img src="http://oh6ybr0jg.bkt.clouddn.com/%E5%90%AF%E5%8A%A8zk.jpg" alt="此处输入图片的描述"></p>
<p>启动ZkCli.cmd<br><img src="http://oh6ybr0jg.bkt.clouddn.com/%E5%90%AF%E5%8A%A8zkCli.jpg" alt="此处输入图片的描述"></p>
<p>kafka启动。在配置文件修改<br>Program arguments：config/server.properties</p>
<p>然后修改server.properties里面的参数即可。</p>
<p>启动前：<br><img src="http://oh6ybr0jg.bkt.clouddn.com/%E5%90%AF%E5%8A%A8kafka%E5%89%8D.jpg" alt="此处输入图片的描述"></p>
<p>启动后：<br><img src="http://oh6ybr0jg.bkt.clouddn.com/%E5%90%AF%E5%8A%A8kafka%E5%90%8E.jpg" alt="此处输入图片的描述"></p>
<p>源码阅读（一）<br>从启动入口分析：Kafka.scala</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">/*从配置文件读取kafka服务器启动参数--将传入的参数转换成Properties 文件，如果参数为空将提示：</span></div><div class="line">       * USAGE: java [options] KafkaServer server.properties [--override property=value]*</div><div class="line">       * Option               Description</div><div class="line">       * ------               -----------</div><div class="line">       * --override &lt;String&gt;  Optional property that should override values set in</div><div class="line">       *                server.properties file</div><div class="line">       *</div><div class="line">       *  判断参数是否大于1，将后面的参数放到Properties里</div><div class="line">       * */</div><div class="line">      <span class="keyword">val</span> serverProps = getPropsFromArgs(args)</div><div class="line"></div><div class="line">      <span class="comment">//创建KafkaServerStartable对象</span></div><div class="line">      <span class="keyword">val</span> kafkaServerStartable = <span class="type">KafkaServerStartable</span>.fromProps(serverProps)</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">// attach shutdown handler to catch control-c</span></div><div class="line">      <span class="type">Runtime</span>.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="type">Thread</span>() &#123;</div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() = &#123;</div><div class="line">          kafkaServerStartable.shutdown</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">      kafkaServerStartable.startup</div><div class="line">      kafkaServerStartable.awaitShutdown</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> &#123;</div><div class="line">      <span class="keyword">case</span> e: <span class="type">Throwable</span> =&gt;</div><div class="line">        fatal(e)</div><div class="line">        <span class="type">System</span>.exit(<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="type">System</span>.exit(<span class="number">0</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h5 id="这上面有个小知识点：-告诉编译器你希望将某个参数当作参数序列处理"><a href="#这上面有个小知识点：-告诉编译器你希望将某个参数当作参数序列处理" class="headerlink" title="这上面有个小知识点：_* 告诉编译器你希望将某个参数当作参数序列处理"></a>这上面有个小知识点：_* 告诉编译器你希望将某个参数当作参数序列处理</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span></span>(args: <span class="type">String</span>*) = <span class="keyword">for</span> (arg &lt;- args) println(arg)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) = &#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="type">Array</span>(<span class="string">"config/server.properties"</span>,<span class="string">"canshu1"</span>,<span class="string">"canshu2"</span>)</div><div class="line">  echo(args.slice(<span class="number">1</span>, args.length): _*)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出是<br>canshu1<br>canshu2</p>
<p>kafkaServerStartable封装了KafkaServer</p>
<h3 id="1-具体的启动类在：KafkaServerStartable的startup方法"><a href="#1-具体的启动类在：KafkaServerStartable的startup方法" class="headerlink" title="1.具体的启动类在：KafkaServerStartable的startup方法"></a>1.具体的启动类在：KafkaServerStartable的startup方法</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">startup</span></span>() &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      info(<span class="string">"starting"</span>)</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(isShuttingDown.get)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalStateException</span>(<span class="string">"Kafka server is still shutting down, cannot re-start!"</span>)</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(startupComplete.get)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">      <span class="keyword">val</span> canStartup = isStartingUp.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)</div><div class="line">      <span class="keyword">if</span> (canStartup) &#123;</div><div class="line">        brokerState.newState(<span class="type">Starting</span>)</div><div class="line"></div><div class="line">        <span class="comment">/* start scheduler */</span></div><div class="line">        kafkaScheduler.startup()</div><div class="line"></div><div class="line">        <span class="comment">/* setup zookeeper */</span></div><div class="line">        zkUtils = initZk()</div><div class="line"></div><div class="line">        <span class="comment">/* Get or create cluster_id */</span></div><div class="line">        _clusterId = getOrGenerateClusterId(zkUtils)</div><div class="line">        info(<span class="string">s"Cluster ID = <span class="subst">$clusterId</span>"</span>)</div><div class="line"></div><div class="line">        <span class="comment">/* generate brokerId */</span></div><div class="line">        config.brokerId =  getBrokerId</div><div class="line">        <span class="keyword">this</span>.logIdent = <span class="string">"[Kafka Server "</span> + config.brokerId + <span class="string">"], "</span></div><div class="line"></div><div class="line">        <span class="comment">/* create and configure metrics */</span></div><div class="line">        <span class="keyword">val</span> reporters = config.getConfiguredInstances(<span class="type">KafkaConfig</span>.<span class="type">MetricReporterClassesProp</span>, classOf[<span class="type">MetricsReporter</span>],</div><div class="line">            <span class="type">Map</span>[<span class="type">String</span>, <span class="type">AnyRef</span>](<span class="type">KafkaConfig</span>.<span class="type">BrokerIdProp</span> -&gt; (config.brokerId.toString)).asJava)</div><div class="line">        reporters.add(<span class="keyword">new</span> <span class="type">JmxReporter</span>(jmxPrefix))</div><div class="line">        <span class="keyword">val</span> metricConfig = <span class="type">KafkaServer</span>.metricConfig(config)</div><div class="line">        metrics = <span class="keyword">new</span> <span class="type">Metrics</span>(metricConfig, reporters, time, <span class="literal">true</span>)</div><div class="line"></div><div class="line">        quotaManagers = <span class="type">QuotaFactory</span>.instantiate(config, metrics, time)</div><div class="line">        notifyClusterListeners(kafkaMetricsReporters ++ reporters.asScala)</div><div class="line"></div><div class="line">        <span class="comment">/* start log manager */</span></div><div class="line">        logManager = createLogManager(zkUtils.zkClient, brokerState)</div><div class="line">        logManager.startup()</div><div class="line"></div><div class="line">        metadataCache = <span class="keyword">new</span> <span class="type">MetadataCache</span>(config.brokerId)</div><div class="line">        credentialProvider = <span class="keyword">new</span> <span class="type">CredentialProvider</span>(config.saslEnabledMechanisms)</div><div class="line"></div><div class="line">        socketServer = <span class="keyword">new</span> <span class="type">SocketServer</span>(config, metrics, time, credentialProvider)</div><div class="line">        socketServer.startup()</div><div class="line"></div><div class="line">        <span class="comment">/* start replica manager */</span></div><div class="line">        replicaManager = <span class="keyword">new</span> <span class="type">ReplicaManager</span>(config, metrics, time, zkUtils, kafkaScheduler, logManager,</div><div class="line">          isShuttingDown, quotaManagers.follower)</div><div class="line">        replicaManager.startup()</div><div class="line"></div><div class="line">        <span class="comment">/* start kafka controller */</span></div><div class="line">        kafkaController = <span class="keyword">new</span> <span class="type">KafkaController</span>(config, zkUtils, brokerState, time, metrics, threadNamePrefix)</div><div class="line">        kafkaController.startup()</div><div class="line"></div><div class="line">        adminManager = <span class="keyword">new</span> <span class="type">AdminManager</span>(config, metrics, metadataCache, zkUtils)</div><div class="line"></div><div class="line">        <span class="comment">/* start group coordinator */</span></div><div class="line">        <span class="comment">// Hardcode Time.SYSTEM for now as some Streams tests fail otherwise, it would be good to fix the underlying issue</span></div><div class="line">        groupCoordinator = <span class="type">GroupCoordinator</span>(config, zkUtils, replicaManager, <span class="type">Time</span>.<span class="type">SYSTEM</span>)</div><div class="line">        groupCoordinator.startup()</div><div class="line"></div><div class="line">        <span class="comment">/* Get the authorizer and initialize it if one is specified.*/</span></div><div class="line">        authorizer = <span class="type">Option</span>(config.authorizerClassName).filter(_.nonEmpty).map &#123; authorizerClassName =&gt;</div><div class="line">          <span class="keyword">val</span> authZ = <span class="type">CoreUtils</span>.createObject[<span class="type">Authorizer</span>](authorizerClassName)</div><div class="line">          authZ.configure(config.originals())</div><div class="line">          authZ</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* start processing requests */</span></div><div class="line">        apis = <span class="keyword">new</span> <span class="type">KafkaApis</span>(socketServer.requestChannel, replicaManager, adminManager, groupCoordinator,</div><div class="line">          kafkaController, zkUtils, config.brokerId, config, metadataCache, metrics, authorizer, quotaManagers,</div><div class="line">          clusterId, time)</div><div class="line"></div><div class="line">        requestHandlerPool = <span class="keyword">new</span> <span class="type">KafkaRequestHandlerPool</span>(config.brokerId, socketServer.requestChannel, apis, time,</div><div class="line">          config.numIoThreads)</div><div class="line"></div><div class="line">        <span class="type">Mx4jLoader</span>.maybeLoad()</div><div class="line"></div><div class="line">        <span class="comment">/* start dynamic config manager */</span></div><div class="line">        dynamicConfigHandlers = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">ConfigHandler</span>](<span class="type">ConfigType</span>.<span class="type">Topic</span> -&gt; <span class="keyword">new</span> <span class="type">TopicConfigHandler</span>(logManager, config, quotaManagers),</div><div class="line">                                                           <span class="type">ConfigType</span>.<span class="type">Client</span> -&gt; <span class="keyword">new</span> <span class="type">ClientIdConfigHandler</span>(quotaManagers),</div><div class="line">                                                           <span class="type">ConfigType</span>.<span class="type">User</span> -&gt; <span class="keyword">new</span> <span class="type">UserConfigHandler</span>(quotaManagers, credentialProvider),</div><div class="line">                                                           <span class="type">ConfigType</span>.<span class="type">Broker</span> -&gt; <span class="keyword">new</span> <span class="type">BrokerConfigHandler</span>(config, quotaManagers))</div><div class="line"></div><div class="line">        <span class="comment">// Create the config manager. start listening to notifications</span></div><div class="line">        dynamicConfigManager = <span class="keyword">new</span> <span class="type">DynamicConfigManager</span>(zkUtils, dynamicConfigHandlers)</div><div class="line">        dynamicConfigManager.startup()</div><div class="line"></div><div class="line">        <span class="comment">/* tell everyone we are alive */</span></div><div class="line">        <span class="keyword">val</span> listeners = config.advertisedListeners.map &#123; endpoint =&gt;</div><div class="line">          <span class="keyword">if</span> (endpoint.port == <span class="number">0</span>)</div><div class="line">            endpoint.copy(port = socketServer.boundPort(endpoint.listenerName))</div><div class="line">          <span class="keyword">else</span></div><div class="line">            endpoint</div><div class="line">        &#125;</div><div class="line">        kafkaHealthcheck = <span class="keyword">new</span> <span class="type">KafkaHealthcheck</span>(config.brokerId, listeners, zkUtils, config.rack,</div><div class="line">          config.interBrokerProtocolVersion)</div><div class="line">        kafkaHealthcheck.startup()</div><div class="line"></div><div class="line">        <span class="comment">// Now that the broker id is successfully registered via KafkaHealthcheck, checkpoint it</span></div><div class="line">        checkpointBrokerId(config.brokerId)</div><div class="line"></div><div class="line">        <span class="comment">/* register broker metrics */</span></div><div class="line">        registerStats()</div><div class="line"></div><div class="line">        brokerState.newState(<span class="type">RunningAsBroker</span>)</div><div class="line">        shutdownLatch = <span class="keyword">new</span> <span class="type">CountDownLatch</span>(<span class="number">1</span>)</div><div class="line">        startupComplete.set(<span class="literal">true</span>)</div><div class="line">        isStartingUp.set(<span class="literal">false</span>)</div><div class="line">        <span class="type">AppInfoParser</span>.registerAppInfo(jmxPrefix, config.brokerId.toString)</div><div class="line">        info(<span class="string">"started"</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> &#123;</div><div class="line">      <span class="keyword">case</span> e: <span class="type">Throwable</span> =&gt;</div><div class="line">        fatal(<span class="string">"Fatal error during KafkaServer startup. Prepare to shutdown"</span>, e)</div><div class="line">        isStartingUp.set(<span class="literal">false</span>)</div><div class="line">        shutdown()</div><div class="line">        <span class="keyword">throw</span> e</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h5 id="Starting-继承BrokerStates，BrokerStates是一个sealed-trait"><a href="#Starting-继承BrokerStates，BrokerStates是一个sealed-trait" class="headerlink" title="Starting 继承BrokerStates，BrokerStates是一个sealed trait"></a>Starting 继承BrokerStates，BrokerStates是一个sealed trait</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">BrokerStates</span> </span>&#123; <span class="function"><span class="keyword">def</span> <span class="title">state</span></span>: <span class="type">Byte</span> &#125;</div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">NotRunning</span> <span class="keyword">extends</span> <span class="title">BrokerStates</span> </span>&#123; <span class="keyword">val</span> state: <span class="type">Byte</span> = <span class="number">0</span> &#125;</div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">Starting</span> <span class="keyword">extends</span> <span class="title">BrokerStates</span> </span>&#123; <span class="keyword">val</span> state: <span class="type">Byte</span> = <span class="number">1</span> &#125;</div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">RecoveringFromUncleanShutdown</span> <span class="keyword">extends</span> <span class="title">BrokerStates</span> </span>&#123; <span class="keyword">val</span> state: <span class="type">Byte</span> = <span class="number">2</span> &#125;</div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">RunningAsBroker</span> <span class="keyword">extends</span> <span class="title">BrokerStates</span> </span>&#123; <span class="keyword">val</span> state: <span class="type">Byte</span> = <span class="number">3</span> &#125;</div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">PendingControlledShutdown</span> <span class="keyword">extends</span> <span class="title">BrokerStates</span> </span>&#123; <span class="keyword">val</span> state: <span class="type">Byte</span> = <span class="number">6</span> &#125;</div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">BrokerShuttingDown</span> <span class="keyword">extends</span> <span class="title">BrokerStates</span> </span>&#123; <span class="keyword">val</span> state: <span class="type">Byte</span> = <span class="number">7</span> &#125;</div></pre></td></tr></table></figure>
<p>trait定义为sealed 有两层含义<br>1.其修饰的trait class只能在当前文件里面被继承<br>2.用sealed修饰这样做的目的是告诉scala编译器在检查模式匹配的时候，让scala知道这些case的所有情况，scala就能够在编译的时候进行检查，看你写的代码是否有没有漏掉什么没case到，减少编程的错误。</p>
<h3 id="2-start-scheduler"><a href="#2-start-scheduler" class="headerlink" title="2.start scheduler:"></a>2.start scheduler:</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafkaScheduler.startup()</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaScheduler</span>(<span class="params">val threads: <span class="type">Int</span>, </span></span></div><div class="line">                     val threadNamePrefix: <span class="type">String</span> = "kafka-scheduler-", </div><div class="line">                     daemon: <span class="type">Boolean</span> = true) <span class="keyword">extends</span> <span class="title">Scheduler</span> <span class="keyword">with</span> <span class="title">Logging</span> &#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> executor: <span class="type">ScheduledThreadPoolExecutor</span> = <span class="literal">null</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> schedulerThreadId = <span class="keyword">new</span> <span class="type">AtomicInteger</span>(<span class="number">0</span>)</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">startup</span></span>() &#123;</div><div class="line">    debug(<span class="string">"Initializing task scheduler."</span>)</div><div class="line">    <span class="keyword">this</span> synchronized &#123;</div><div class="line">      <span class="keyword">if</span>(isStarted)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalStateException</span>(<span class="string">"This scheduler has already been started!"</span>)</div><div class="line">      executor = <span class="keyword">new</span> <span class="type">ScheduledThreadPoolExecutor</span>(threads)</div><div class="line">      executor.setContinueExistingPeriodicTasksAfterShutdownPolicy(<span class="literal">false</span>)</div><div class="line">      executor.setExecuteExistingDelayedTasksAfterShutdownPolicy(<span class="literal">false</span>)</div><div class="line">      executor.setThreadFactory(<span class="keyword">new</span> <span class="type">ThreadFactory</span>() &#123;</div><div class="line">                                  <span class="function"><span class="keyword">def</span> <span class="title">newThread</span></span>(runnable: <span class="type">Runnable</span>): <span class="type">Thread</span> = </div><div class="line">                                    <span class="type">Utils</span>.newThread(threadNamePrefix + schedulerThreadId.getAndIncrement(), runnable, daemon)</div><div class="line">                                &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.此处使用了同步锁，如果已经启动，直接抛个IllegalStateException异常，由外面通用异常Throwable捕获。<br>2.根据配置文件的background.threads 创建一个ScheduledThreadPoolExecutor(threads)【java.util.concurrent包下的】</p>
<h3 id="3-setup-zookeeper"><a href="#3-setup-zookeeper" class="headerlink" title="3.setup zookeeper"></a>3.setup zookeeper</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zkUtils = initZk()</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">initZk</span></span>(): <span class="type">ZkUtils</span> = &#123;</div><div class="line">   info(<span class="string">s"Connecting to zookeeper on <span class="subst">$&#123;config.zkConnect&#125;</span>"</span>)</div><div class="line"></div><div class="line">   <span class="keyword">val</span> chrootIndex = config.zkConnect.indexOf(<span class="string">"/"</span>)</div><div class="line">   <span class="keyword">val</span> chrootOption = &#123;</div><div class="line">     <span class="keyword">if</span> (chrootIndex &gt; <span class="number">0</span>) <span class="type">Some</span>(config.zkConnect.substring(chrootIndex))</div><div class="line">     <span class="keyword">else</span> <span class="type">None</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">val</span> secureAclsEnabled = config.zkEnableSecureAcls</div><div class="line">   <span class="keyword">val</span> isZkSecurityEnabled = <span class="type">JaasUtils</span>.isZkSecurityEnabled()</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (secureAclsEnabled &amp;&amp; !isZkSecurityEnabled)</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.<span class="type">SecurityException</span>(<span class="string">s"<span class="subst">$&#123;KafkaConfig.ZkEnableSecureAclsProp&#125;</span> is true, but the verification of the JAAS login file failed."</span>)</div><div class="line"></div><div class="line">   chrootOption.foreach &#123; chroot =&gt;</div><div class="line">     <span class="keyword">val</span> zkConnForChrootCreation = config.zkConnect.substring(<span class="number">0</span>, chrootIndex)</div><div class="line">     <span class="keyword">val</span> zkClientForChrootCreation = <span class="type">ZkUtils</span>(zkConnForChrootCreation,</div><div class="line">                                             sessionTimeout = config.zkSessionTimeoutMs,</div><div class="line">                                             connectionTimeout = config.zkConnectionTimeoutMs,</div><div class="line">                                             secureAclsEnabled)</div><div class="line">     zkClientForChrootCreation.makeSurePersistentPathExists(chroot)</div><div class="line">     info(<span class="string">s"Created zookeeper path <span class="subst">$chroot</span>"</span>)</div><div class="line">     zkClientForChrootCreation.zkClient.close()</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">val</span> zkUtils = <span class="type">ZkUtils</span>(config.zkConnect,</div><div class="line">                         sessionTimeout = config.zkSessionTimeoutMs,</div><div class="line">                         connectionTimeout = config.zkConnectionTimeoutMs,</div><div class="line">                         secureAclsEnabled)</div><div class="line">   zkUtils.setupCommonPaths()</div><div class="line">   zkUtils</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>1.创建连接<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> persistentZkPaths = <span class="type">Seq</span>(<span class="type">ConsumersPath</span>,</div><div class="line">                              <span class="type">BrokerIdsPath</span>,</div><div class="line">                              <span class="type">BrokerTopicsPath</span>,</div><div class="line">                              <span class="type">ConfigChangesPath</span>,</div><div class="line">                              getEntityConfigRootPath(<span class="type">ConfigType</span>.<span class="type">Topic</span>),</div><div class="line">                              getEntityConfigRootPath(<span class="type">ConfigType</span>.<span class="type">Client</span>),</div><div class="line">                              <span class="type">DeleteTopicsPath</span>,</div><div class="line">                              <span class="type">BrokerSequenceIdPath</span>,</div><div class="line">                              <span class="type">IsrChangeNotificationPath</span>)</div></pre></td></tr></table></figure></p>
<p>2.设置通用路径<br>/consumers<br>/brokers/ids<br>/brokers/topics<br>/config/changes<br>/config/topics<br>/config/clients<br>/admin/delete_topics<br>/brokers/seqid<br>/isr_change_notification</p>
<p>ISR：Kafka在Zookeeper中动态维护了一个ISR（in-sync replicas） set，这个set里的所有replica都跟上了leader，只有ISR里的成员才有被选为leader的可能</p>
<h3 id="4-Get-or-create-cluster-id"><a href="#4-Get-or-create-cluster-id" class="headerlink" title="4.Get or create cluster_id"></a>4.Get or create cluster_id</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_clusterId = getOrGenerateClusterId(zkUtils)</div><div class="line">info(<span class="string">s"Cluster ID = <span class="subst">$clusterId</span>"</span>)</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">getOrGenerateClusterId</span></span>(zkUtils: <span class="type">ZkUtils</span>): <span class="type">String</span> = &#123;</div><div class="line">    zkUtils.getClusterId.getOrElse(zkUtils.createOrGetClusterId(<span class="type">CoreUtils</span>.generateUuidAsBase64))</div><div class="line">  &#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createOrGetClusterId</span></span>(proposedClusterId: <span class="type">String</span>): <span class="type">String</span> = &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      createPersistentPath(<span class="type">ClusterIdPath</span>, <span class="type">ClusterId</span>.toJson(proposedClusterId))</div><div class="line">      proposedClusterId</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">      <span class="keyword">case</span> _: <span class="type">ZkNodeExistsException</span> =&gt;</div><div class="line">        getClusterId.getOrElse(<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">KafkaException</span>(<span class="string">"Failed to get cluster id from Zookeeper. This can only happen if /cluster/id is deleted from Zookeeper."</span>))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">   * Create an persistent node with the given path and data. Create parents if necessary.</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createPersistentPath</span></span>(path: <span class="type">String</span>, data: <span class="type">String</span> = <span class="string">""</span>, acls: java.util.<span class="type">List</span>[<span class="type">ACL</span>] = <span class="type">UseDefaultAcls</span>): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> acl = <span class="keyword">if</span> (acls eq <span class="type">UseDefaultAcls</span>) <span class="type">ZkUtils</span>.defaultAcls(isSecure, path) <span class="keyword">else</span> acls</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="type">ZkPath</span>.createPersistent(zkClient, path, data, acl)</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">      <span class="keyword">case</span> _: <span class="type">ZkNoNodeException</span> =&gt;</div><div class="line">        createParentPath(path)</div><div class="line">        <span class="type">ZkPath</span>.createPersistent(zkClient, path, data, acl)</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>此处会创建一个persistent节点/cluster/id 如果节点已经存在，则刨除异常，上次获取异常，然后去节点下获取_clusterId，如果不存在，将创建的proposedClusterId返回</p>
<h5 id="此处需要注意zookeeper的节点类型分为："><a href="#此处需要注意zookeeper的节点类型分为：" class="headerlink" title="此处需要注意zookeeper的节点类型分为："></a>此处需要注意zookeeper的节点类型分为：</h5><p>持久节点（PERSISTENT）<br>持久顺序节点（PERSISTENT_SEQUENTIAL）<br>临时节点（EPHEMERAL）<br>临时顺序节点（EPHEMERAL_SEQUENTIAL）<br>顺序节点即创建有序的节点，节点名加上一个数字后缀。临时节点和客户端绑定，会话失效（非连接断开）则自动清楚</p>
<p>临时顺序节点可用来实现分布式锁<br>1.客户端调用create()方法创建名为“<em>locknode</em>/guid-lock-”的节点，需要注意的是，这里节点的创建类型需要设置为EPHEMERAL_SEQUENTIAL。<br>2.客户端调用getChildren(“<em>locknode</em>”)方法来获取所有已经创建的子节点，注意，这里不注册任何Watcher。<br>3.客户端获取到所有子节点path之后，如果发现自己在步骤1中创建的节点序号最小，那么就认为这个客户端获得了锁。<br>4.如果在步骤3中发现自己并非所有子节点中最小的，说明自己还没有获取到锁。此时客户端需要找到比自己小的那个节点，然后对其调用exist()方法，同时注册事件监听。<br>5.之后当这个被关注的节点被移除了，客户端会收到相应的通知。这个时候客户端需要再次调用getChildren(“<em>locknode</em>”)方法来获取所有已经创建的子节点，确保自己确实是最小的节点了，然后进入步骤3。</p>
<h3 id="5-generate-brokerId"><a href="#5-generate-brokerId" class="headerlink" title="5.generate brokerId"></a>5.generate brokerId</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">config.brokerId =  getBrokerId</div><div class="line"><span class="keyword">this</span>.logIdent = <span class="string">"[Kafka Server "</span> + config.brokerId + <span class="string">"], "</span></div></pre></td></tr></table></figure>
<p>略</p>
<h3 id="6-create-and-configure-metrics"><a href="#6-create-and-configure-metrics" class="headerlink" title="6.create and configure metrics"></a>6.create and configure metrics</h3><p>内部状态的监控模块<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> reporters = config.getConfiguredInstances(<span class="type">KafkaConfig</span>.<span class="type">MetricReporterClassesProp</span>, classOf[<span class="type">MetricsReporter</span>],</div><div class="line">            <span class="type">Map</span>[<span class="type">String</span>, <span class="type">AnyRef</span>](<span class="type">KafkaConfig</span>.<span class="type">BrokerIdProp</span> -&gt; (config.brokerId.toString)).asJava)</div><div class="line">reporters.add(<span class="keyword">new</span> <span class="type">JmxReporter</span>(jmxPrefix))</div><div class="line"><span class="keyword">val</span> metricConfig = <span class="type">KafkaServer</span>.metricConfig(config)</div><div class="line">metrics = <span class="keyword">new</span> <span class="type">Metrics</span>(metricConfig, reporters, time, <span class="literal">true</span>)</div><div class="line"></div><div class="line">quotaManagers = <span class="type">QuotaFactory</span>.instantiate(config, metrics, time)</div><div class="line">notifyClusterListeners(kafkaMetricsReporters ++ reporters.asScala)</div></pre></td></tr></table></figure></p>
<p>从配置参数metric.reporters 获取监控类</p>
<p>此处有个小概念;<br>集合允许使用asScala和asJava方法来做scala和java之间的转换</p>
<p>metricConfig里封装了<br>metrics.num.samples（     用于维护metrics的样本数）<br>metrics.recording.level<br>metrics.sample.window.ms（metrics系统维护可配置的样本数量，在一个可修正的window size。这项配置配置了窗口大小，例如。我们可能在30s的期间维护两个样本。当一个窗口推出后，我们会擦除并重写最老的窗口）</p>
<p>小概念：<br>4种操作符的区别和联系<br>:: 该方法被称为cons，意为构造，向队列的头部追加数据，创造新的列表。用法为        x::list,其中x为加入到头部的元素，无论x是列表与否，它都只将成为新生成列表的第一个元素，也就是说新生成的列表长度为list的长度＋1(BTW ， x::list等价于list.::(x))<br>:+和+: 两者的区别在于:+方法用于在尾部追加元素，+:方法用于在头部追加元素，和::很类似，但是::可以用于pattern match ，而+:则不行. 关于+:和:+,只要记住冒号永远靠近集合类型就OK了。<br>++ 该方法用于连接两个集合，list1++list2<br>::: 该方法只能用于连接两个List类型的集合</p>
<h3 id="7-start-log-manager"><a href="#7-start-log-manager" class="headerlink" title="7.start log manager"></a>7.start log manager</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">logManager = createLogManager(zkUtils.zkClient, brokerState)</div><div class="line">logManager.startup()</div><div class="line"></div><div class="line">metadataCache = <span class="keyword">new</span> <span class="type">MetadataCache</span>(config.brokerId)</div><div class="line">credentialProvider = <span class="keyword">new</span> <span class="type">CredentialProvider</span>(config.saslEnabledMechanisms)</div><div class="line"></div><div class="line">socketServer = <span class="keyword">new</span> <span class="type">SocketServer</span>(config, metrics, time, credentialProvider)</div><div class="line">socketServer.startup()</div></pre></td></tr></table></figure>
<p>根据一系列配置参数，启动LogManager。详情见kafka.log.CleanerConfig和kafka.log.LogManager</p>
<p>startup创建了4个线程，分别负责创建日志，写日志，检索日志，清理日志<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">startup</span></span>() &#123;</div><div class="line">    <span class="comment">/* Schedule the cleanup task to delete old logs */</span></div><div class="line">    <span class="keyword">if</span>(scheduler != <span class="literal">null</span>) &#123;</div><div class="line">      info(<span class="string">"Starting log cleanup with a period of %d ms."</span>.format(retentionCheckMs))</div><div class="line">      scheduler.schedule(<span class="string">"kafka-log-retention"</span>,</div><div class="line">                         cleanupLogs,</div><div class="line">                         delay = <span class="type">InitialTaskDelayMs</span>,</div><div class="line">                         period = retentionCheckMs,</div><div class="line">                         <span class="type">TimeUnit</span>.<span class="type">MILLISECONDS</span>)</div><div class="line">      info(<span class="string">"Starting log flusher with a default period of %d ms."</span>.format(flushCheckMs))</div><div class="line">      scheduler.schedule(<span class="string">"kafka-log-flusher"</span>, </div><div class="line">                         flushDirtyLogs, </div><div class="line">                         delay = <span class="type">InitialTaskDelayMs</span>, </div><div class="line">                         period = flushCheckMs, </div><div class="line">                         <span class="type">TimeUnit</span>.<span class="type">MILLISECONDS</span>)</div><div class="line">      scheduler.schedule(<span class="string">"kafka-recovery-point-checkpoint"</span>,</div><div class="line">                         checkpointRecoveryPointOffsets,</div><div class="line">                         delay = <span class="type">InitialTaskDelayMs</span>,</div><div class="line">                         period = flushCheckpointMs,</div><div class="line">                         <span class="type">TimeUnit</span>.<span class="type">MILLISECONDS</span>)</div><div class="line">      scheduler.schedule(<span class="string">"kafka-delete-logs"</span>,</div><div class="line">                         deleteLogs,</div><div class="line">                         delay = <span class="type">InitialTaskDelayMs</span>,</div><div class="line">                         period = defaultConfig.fileDeleteDelayMs,</div><div class="line">                         <span class="type">TimeUnit</span>.<span class="type">MILLISECONDS</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(cleanerConfig.enableCleaner)</div><div class="line">      cleaner.startup()</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="8-start-replica-manager"><a href="#8-start-replica-manager" class="headerlink" title="8.start replica manager"></a>8.start replica manager</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">replicaManager = <span class="keyword">new</span> <span class="type">ReplicaManager</span>(config, metrics, time, zkUtils, kafkaScheduler, logManager,</div><div class="line">          isShuttingDown, quotaManagers.follower)</div><div class="line">replicaManager.startup()</div></pre></td></tr></table></figure>
<p>启动isr-expiration线程<br>启动isr-change-propagation线程<br>在/controller下建了一个监听</p>
<p>此处有个小技巧<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inLock</span></span>[<span class="type">T</span>](lock: <span class="type">Lock</span>)(fun: =&gt; <span class="type">T</span>): <span class="type">T</span> = &#123;</div><div class="line">    lock.lock()</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      fun</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      lock.unlock()</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p> : =&gt;注意:后面要有空格，此处标明调用的时候才执行，否则在用inlock的函数时候fun已经在锁外面执行了.</p>
</blockquote>
<p>参考：<a href="http://www.jianshu.com/p/f53e0b54a44a" target="_blank" rel="external">http://www.jianshu.com/p/f53e0b54a44a</a></p>
<h3 id="9-start-kafka-controller"><a href="#9-start-kafka-controller" class="headerlink" title="9.start kafka controller"></a>9.start kafka controller</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">kafkaController = <span class="keyword">new</span> <span class="type">KafkaController</span>(config, zkUtils, brokerState, time, metrics, threadNamePrefix)</div><div class="line">kafkaController.startup()</div><div class="line"></div><div class="line">adminManager = <span class="keyword">new</span> <span class="type">AdminManager</span>(config, metrics, metadataCache, zkUtils)</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">startup</span></span>() = &#123;</div><div class="line">    inLock(controllerContext.controllerLock) &#123;</div><div class="line">      info(<span class="string">"Controller starting up"</span>)</div><div class="line">      registerSessionExpirationListener()</div><div class="line">      isRunning = <span class="literal">true</span></div><div class="line">      controllerElector.startup</div><div class="line">      info(<span class="string">"Controller startup complete"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分支1.registerSessionExpirationListener-&gt;SessionExpirationListener-&gt;handleNewSession</p>
<p>当会话超时，重新连接上的时候，调用之前注册在ZookeeperLeaderElector的onControllerResignation函数<br>controllerElector.elect 重新选举</p>
<p>分支2.ZookeeperLeaderElector-&gt;（onControllerFailover，onControllerResignation）-&gt;LeaderChangeListener<br>controllerElector就是ZookeeperLeaderElector 是kafka的选举机制<br>ZookeeperLeaderElector：通过zk创建Ephemeral Node（临时节点）的方式来进行选举，即如果存在并发情况下向zk的同一个路径创建node的话，有且只有1个客户端会创建成功，其它客户端创建失败，但是当创建成功的客户端和zk的链接断开之后，这个node也会消失，其它的客户端从而继续竞争  </p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">startup</span> </span>&#123;</div><div class="line">    inLock(controllerContext.controllerLock) &#123;</div><div class="line">      controllerContext.zkUtils.zkClient.subscribeDataChanges(electionPath, leaderChangeListener)</div><div class="line">      elect</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>1.监听electionPath（/controller）<br>2.elect选举</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> <span class="type">ControllerPath</span> = <span class="string">"/controller"</span></div><div class="line"><span class="keyword">val</span> electString = <span class="type">Json</span>.encode(<span class="type">Map</span>(<span class="string">"version"</span> -&gt; <span class="number">1</span>, <span class="string">"brokerid"</span> -&gt; brokerId, <span class="string">"timestamp"</span> -&gt; timestamp))</div><div class="line"><span class="keyword">val</span> zkCheckedEphemeral = <span class="keyword">new</span> <span class="type">ZKCheckedEphemeral</span>(electionPath,lectString, controllerContext.zkUtils.zkConnection.getZookeeper,  <span class="type">JaasUtils</span>.isZkSecurityEnabled())</div><div class="line">leaderId = getControllerID</div></pre></td></tr></table></figure>
<p>此处会在/controller 下面写一个类似如下的内容：<br>{“version”:1,”brokerid”:102,”timestamp”:”1495880001272”}<br>通过getControllerID获取当前的leaderId<br>然后通过amILeader看自己是否是leader</p>
<p>ZookeeperLeaderElecto<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeaderChangeListener</span> <span class="keyword">extends</span> <span class="title">IZkDataListener</span> <span class="keyword">with</span> <span class="title">Logging</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Called when the leader information stored in zookeeper has changed. Record the new leader in memory</div><div class="line">     * @throws Exception On any error.</div><div class="line">     */</div><div class="line">    <span class="meta">@throws</span>[<span class="type">Exception</span>]</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleDataChange</span></span>(dataPath: <span class="type">String</span>, data: <span class="type">Object</span>) &#123;</div><div class="line">      <span class="keyword">val</span> shouldResign = inLock(controllerContext.controllerLock) &#123;</div><div class="line">        <span class="keyword">val</span> amILeaderBeforeDataChange = amILeader</div><div class="line">        leaderId = <span class="type">KafkaController</span>.parseControllerId(data.toString)</div><div class="line">        info(<span class="string">"New leader is %d"</span>.format(leaderId))</div><div class="line">        <span class="comment">// The old leader needs to resign leadership if it is no longer the leader</span></div><div class="line">        amILeaderBeforeDataChange &amp;&amp; !amILeader</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (shouldResign)</div><div class="line">        onResigningAsLeader()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Called when the leader information stored in zookeeper has been delete. Try to elect as the leader</div><div class="line">     * @throws Exception</div><div class="line">     *             On any error.</div><div class="line">     */</div><div class="line">    <span class="meta">@throws</span>[<span class="type">Exception</span>]</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleDataDeleted</span></span>(dataPath: <span class="type">String</span>) &#123; </div><div class="line">      <span class="keyword">val</span> shouldResign = inLock(controllerContext.controllerLock) &#123;</div><div class="line">        debug(<span class="string">"%s leader change listener fired for path %s to handle data deleted: trying to elect as a leader"</span></div><div class="line">          .format(brokerId, dataPath))</div><div class="line">        amILeader</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (shouldResign)</div><div class="line">        onResigningAsLeader()</div><div class="line"></div><div class="line">      inLock(controllerContext.controllerLock) &#123;</div><div class="line">        elect</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>如果节点下线会调用handleDataDeleted。看自己是否是leader，如果是需要先退休onResigningAsLeader。<br>然后选举<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">val</span> zkCheckedEphemeral = <span class="keyword">new</span> <span class="type">ZKCheckedEphemeral</span>(electionPath,</div><div class="line">                                                      electString,</div><div class="line">                                                      controllerContext.zkUtils.zkConnection.getZookeeper,</div><div class="line">                                                      <span class="type">JaasUtils</span>.isZkSecurityEnabled())</div><div class="line">      zkCheckedEphemeral.create()</div><div class="line">      info(brokerId + <span class="string">" successfully elected as leader"</span>)</div><div class="line">      leaderId = brokerId</div><div class="line">      onBecomingLeader()</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">      <span class="keyword">case</span> _: <span class="type">ZkNodeExistsException</span> =&gt;</div><div class="line">        <span class="comment">// If someone else has written the path, then</span></div><div class="line">        leaderId = getControllerID </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (leaderId != <span class="number">-1</span>)</div><div class="line">          debug(<span class="string">"Broker %d was elected as leader instead of broker %d"</span>.format(leaderId, brokerId))</div><div class="line">        <span class="keyword">else</span></div><div class="line">          warn(<span class="string">"A leader has been elected but just resigned, this will result in another round of election"</span>)</div><div class="line"></div><div class="line">      <span class="keyword">case</span> e2: <span class="type">Throwable</span> =&gt;</div><div class="line">        error(<span class="string">"Error while electing or becoming leader on broker %d"</span>.format(brokerId), e2)</div><div class="line">        resign()</div><div class="line">    &#125;</div><div class="line">    amILeader</div></pre></td></tr></table></figure></p>
<p>创建临时节点</p>
<p>onControllerFailover:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">onControllerFailover</span></span>() &#123;</div><div class="line">    <span class="keyword">if</span>(isRunning) &#123;</div><div class="line">      info(<span class="string">"Broker %d starting become controller state transition"</span>.format(config.brokerId))</div><div class="line">      readControllerEpochFromZookeeper()</div><div class="line">      incrementControllerEpoch(zkUtils.zkClient)</div><div class="line"></div><div class="line">      <span class="comment">// before reading source of truth from zookeeper, register the listeners to get broker/topic callbacks</span></div><div class="line">      registerReassignedPartitionsListener()</div><div class="line">      registerIsrChangeNotificationListener()</div><div class="line">      registerPreferredReplicaElectionListener()</div><div class="line">      partitionStateMachine.registerListeners()</div><div class="line">      replicaStateMachine.registerListeners()</div><div class="line"></div><div class="line">      initializeControllerContext()</div><div class="line"></div><div class="line">      <span class="comment">// We need to send UpdateMetadataRequest after the controller context is initialized and before the state machines</span></div><div class="line">      <span class="comment">// are started. The is because brokers need to receive the list of live brokers from UpdateMetadataRequest before</span></div><div class="line">      <span class="comment">// they can process the LeaderAndIsrRequests that are generated by replicaStateMachine.startup() and</span></div><div class="line">      <span class="comment">// partitionStateMachine.startup().</span></div><div class="line">      sendUpdateMetadataRequest(controllerContext.liveOrShuttingDownBrokerIds.toSeq)</div><div class="line"></div><div class="line">      replicaStateMachine.startup()</div><div class="line">      partitionStateMachine.startup()</div><div class="line"></div><div class="line">      <span class="comment">// register the partition change listeners for all existing topics on failover</span></div><div class="line">      controllerContext.allTopics.foreach(topic =&gt; partitionStateMachine.registerPartitionChangeListener(topic))</div><div class="line">      info(<span class="string">"Broker %d is ready to serve as the new controller with epoch %d"</span>.format(config.brokerId, epoch))</div><div class="line">      maybeTriggerPartitionReassignment()</div><div class="line">      maybeTriggerPreferredReplicaElection()</div><div class="line">      <span class="keyword">if</span> (config.autoLeaderRebalanceEnable) &#123;</div><div class="line">        info(<span class="string">"starting the partition rebalance scheduler"</span>)</div><div class="line">        autoRebalanceScheduler.startup()</div><div class="line">        autoRebalanceScheduler.schedule(<span class="string">"partition-rebalance-thread"</span>, checkAndTriggerPartitionRebalance,</div><div class="line">          <span class="number">5</span>, config.leaderImbalanceCheckIntervalSeconds.toLong, <span class="type">TimeUnit</span>.<span class="type">SECONDS</span>)</div><div class="line">      &#125;</div><div class="line">      deleteTopicManager.start()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      info(<span class="string">"Controller has been shut down, aborting startup/failover"</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>在/admin/reassign_partitions目录注册PartitionsReassignedListener监听函数<br>在/isr_change_notification目录注册IsrChangeNotificationListener监听函数<br>在/admin/preferred_replica_election目录注册PreferredReplicaElectionListener监听函数<br>在/brokers/topics目录注册TopicChangeListener监听函数<br>在/admin/delete_topics目录注册DeleteTopicsListener监听函数<br>在/brokers/ids目录注册BrokerChangeListener监听函数</p>
<blockquote>
<p>监听是调用zk的<br>zkUtils.zkClient.subscribeChildChanges函数，参数是路径和监听函数<br>监听函数实现IZkChildListener接口实现handleChildChange方法</p>
</blockquote>
<p>初始化ControllerContext上下文,里面包含存活的broker，所有主题，分区副本，分区的leader和已经下线的broker。更新leader和isr缓存。启动ControllerChannelManager<br>初始化所有的replica状态<br>初始化所有的partition状态<br>如果auto.leader.rebalance.enable 为true会启动Rebalance调度<br>最后删除主题</p>
<p>通过replicaStateMachine初始化所有的replica状态<br>replicaStateMachine的handleStateChanges<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleStateChanges</span></span>(replicas: <span class="type">Set</span>[<span class="type">PartitionAndReplica</span>], targetState: <span class="type">ReplicaState</span>,</div><div class="line">                         callbacks: <span class="type">Callbacks</span> = (<span class="keyword">new</span> <span class="type">CallbackBuilder</span>).build) &#123;</div><div class="line">    <span class="keyword">if</span>(replicas.nonEmpty) &#123;</div><div class="line">      info(<span class="string">"Invoking state change to %s for replicas %s"</span>.format(targetState, replicas.mkString(<span class="string">","</span>)))</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        brokerRequestBatch.newBatch()</div><div class="line">        replicas.foreach(r =&gt; handleStateChange(r, targetState, callbacks))</div><div class="line">        brokerRequestBatch.sendRequestsToBrokers(controller.epoch)</div><div class="line">      &#125;<span class="keyword">catch</span> &#123;</div><div class="line">        <span class="keyword">case</span> e: <span class="type">Throwable</span> =&gt; error(<span class="string">"Error while moving some replicas to %s state"</span>.format(targetState), e)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>通过partitionStateMachine初始化所有的partition状态<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">handleStateChange</span></span>(topic: <span class="type">String</span>, partition: <span class="type">Int</span>, targetState: <span class="type">PartitionState</span>,</div><div class="line">                                leaderSelector: <span class="type">PartitionLeaderSelector</span>,</div><div class="line">                                callbacks: <span class="type">Callbacks</span>) &#123;</div><div class="line">    <span class="keyword">val</span> topicAndPartition = <span class="type">TopicAndPartition</span>(topic, partition)</div><div class="line">    <span class="keyword">if</span> (!hasStarted.get)</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">StateChangeFailedException</span>((<span class="string">"Controller %d epoch %d initiated state change for partition %s to %s failed because "</span> +</div><div class="line">                                            <span class="string">"the partition state machine has not started"</span>)</div><div class="line">                                              .format(controllerId, controller.epoch, topicAndPartition, targetState))</div><div class="line">    <span class="keyword">val</span> currState = partitionState.getOrElseUpdate(topicAndPartition, <span class="type">NonExistentPartition</span>)</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      targetState <span class="keyword">match</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="type">NewPartition</span> =&gt;</div><div class="line">          <span class="comment">// pre: partition did not exist before this</span></div><div class="line">          assertValidPreviousStates(topicAndPartition, <span class="type">List</span>(<span class="type">NonExistentPartition</span>), <span class="type">NewPartition</span>)</div><div class="line">          partitionState.put(topicAndPartition, <span class="type">NewPartition</span>)</div><div class="line">          <span class="keyword">val</span> assignedReplicas = controllerContext.partitionReplicaAssignment(topicAndPartition).mkString(<span class="string">","</span>)</div><div class="line">          stateChangeLogger.trace(<span class="string">"Controller %d epoch %d changed partition %s state from %s to %s with assigned replicas %s"</span></div><div class="line">                                    .format(controllerId, controller.epoch, topicAndPartition, currState, targetState,</div><div class="line">                                            assignedReplicas))</div><div class="line">          <span class="comment">// post: partition has been assigned replicas</span></div><div class="line">        <span class="keyword">case</span> <span class="type">OnlinePartition</span> =&gt;</div><div class="line">          assertValidPreviousStates(topicAndPartition, <span class="type">List</span>(<span class="type">NewPartition</span>, <span class="type">OnlinePartition</span>, <span class="type">OfflinePartition</span>), <span class="type">OnlinePartition</span>)</div><div class="line">          partitionState(topicAndPartition) <span class="keyword">match</span> &#123;</div><div class="line">            <span class="keyword">case</span> <span class="type">NewPartition</span> =&gt;</div><div class="line">              <span class="comment">// initialize leader and isr path for new partition</span></div><div class="line">              initializeLeaderAndIsrForPartition(topicAndPartition)</div><div class="line">            <span class="keyword">case</span> <span class="type">OfflinePartition</span> =&gt;</div><div class="line">              electLeaderForPartition(topic, partition, leaderSelector)</div><div class="line">            <span class="keyword">case</span> <span class="type">OnlinePartition</span> =&gt; <span class="comment">// invoked when the leader needs to be re-elected</span></div><div class="line">              electLeaderForPartition(topic, partition, leaderSelector)</div><div class="line">            <span class="keyword">case</span> _ =&gt; <span class="comment">// should never come here since illegal previous states are checked above</span></div><div class="line">          &#125;</div><div class="line">          partitionState.put(topicAndPartition, <span class="type">OnlinePartition</span>)</div><div class="line">          <span class="keyword">val</span> leader = controllerContext.partitionLeadershipInfo(topicAndPartition).leaderAndIsr.leader</div><div class="line">          stateChangeLogger.trace(<span class="string">"Controller %d epoch %d changed partition %s from %s to %s with leader %d"</span></div><div class="line">                                    .format(controllerId, controller.epoch, topicAndPartition, currState, targetState, leader))</div><div class="line">           <span class="comment">// post: partition has a leader</span></div><div class="line">        <span class="keyword">case</span> <span class="type">OfflinePartition</span> =&gt;</div><div class="line">          <span class="comment">// pre: partition should be in New or Online state</span></div><div class="line">          assertValidPreviousStates(topicAndPartition, <span class="type">List</span>(<span class="type">NewPartition</span>, <span class="type">OnlinePartition</span>, <span class="type">OfflinePartition</span>), <span class="type">OfflinePartition</span>)</div><div class="line">          <span class="comment">// should be called when the leader for a partition is no longer alive</span></div><div class="line">          stateChangeLogger.trace(<span class="string">"Controller %d epoch %d changed partition %s state from %s to %s"</span></div><div class="line">                                    .format(controllerId, controller.epoch, topicAndPartition, currState, targetState))</div><div class="line">          partitionState.put(topicAndPartition, <span class="type">OfflinePartition</span>)</div><div class="line">          <span class="comment">// post: partition has no alive leader</span></div><div class="line">        <span class="keyword">case</span> <span class="type">NonExistentPartition</span> =&gt;</div><div class="line">          <span class="comment">// pre: partition should be in Offline state</span></div><div class="line">          assertValidPreviousStates(topicAndPartition, <span class="type">List</span>(<span class="type">OfflinePartition</span>), <span class="type">NonExistentPartition</span>)</div><div class="line">          stateChangeLogger.trace(<span class="string">"Controller %d epoch %d changed partition %s state from %s to %s"</span></div><div class="line">                                    .format(controllerId, controller.epoch, topicAndPartition, currState, targetState))</div><div class="line">          partitionState.put(topicAndPartition, <span class="type">NonExistentPartition</span>)</div><div class="line">          <span class="comment">// post: partition state is deleted from all brokers and zookeeper</span></div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">      <span class="keyword">case</span> t: <span class="type">Throwable</span> =&gt;</div><div class="line">        stateChangeLogger.error(<span class="string">"Controller %d epoch %d initiated state change for partition %s from %s to %s failed"</span></div><div class="line">          .format(controllerId, controller.epoch, topicAndPartition, currState, targetState), t)</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>PartitionStateMachine实现了topic的分区状态切换功能，Partition存在的状态如下：<br>NewPartition  分区之前不存在，创建后被分配了replicas，但是还没有leader/isr<br>OnlinePartition  partition在replicas中选举某个成为leader之后<br>OfflinePartition  partition的replicas中的leader下线之后，没有重新选举新的leader之前  或 partition创建之后直接被下线<br>NonExistentPartition  partition重来没有被创建 或 partition创建之后被删除</p>
<p>scala小知识：<br>mkString<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">scala &gt; <span class="keyword">val</span> a = <span class="type">Array</span>(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"cherry"</span>)</div><div class="line">a: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(apple, banana, cherry)</div><div class="line">scala &gt; a.mkString(<span class="string">","</span>)</div><div class="line">res2: <span class="type">String</span> = apple,banana,cherry</div><div class="line"></div><div class="line">scala&gt; a.mkString(<span class="string">"["</span>, <span class="string">", "</span>, <span class="string">"]"</span>)</div><div class="line">res3: <span class="type">String</span> = [apple, banana, cherry]</div><div class="line"></div><div class="line">如果是数组需要先展开数组</div><div class="line">scala&gt; <span class="keyword">val</span> b = <span class="type">Array</span>(<span class="type">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>), <span class="type">Array</span>(<span class="string">"c"</span>, <span class="string">"d"</span>))</div><div class="line">b: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">String</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(a, b), <span class="type">Array</span>(c, d))</div><div class="line">错误的</div><div class="line">scala&gt; b.mkString(<span class="string">","</span>)</div><div class="line">res4: <span class="type">String</span> = [<span class="type">Ljava</span>.lang.<span class="type">String</span>;@<span class="number">64</span>a9fca7,[<span class="type">Ljava</span>.lang.<span class="type">String</span>;@<span class="number">22</span>f756c5</div><div class="line">正确的</div><div class="line">scala&gt; b.flatten.mkString(<span class="string">","</span>)</div><div class="line">res5: <span class="type">String</span> = a,b,c,d</div></pre></td></tr></table></figure></p>
<p>OnlinePartition ：检查前置状态是否为NewPartition, OnlinePartition, OfflinePartition中的一种，<br>1.如果是NewPartition：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">initializeLeaderAndIsrForPartition</span></span>(topicAndPartition: <span class="type">TopicAndPartition</span>) &#123;</div><div class="line">    <span class="keyword">val</span> replicaAssignment = controllerContext.partitionReplicaAssignment(topicAndPartition)</div><div class="line">    <span class="keyword">val</span> liveAssignedReplicas = replicaAssignment.filter(r =&gt; controllerContext.liveBrokerIds.contains(r))</div><div class="line">    liveAssignedReplicas.size <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span> =&gt;</div><div class="line">        <span class="keyword">val</span> failMsg = (<span class="string">"encountered error during state change of partition %s from New to Online, assigned replicas are [%s], "</span> +</div><div class="line">                       <span class="string">"live brokers are [%s]. No assigned replica is alive."</span>)</div><div class="line">                         .format(topicAndPartition, replicaAssignment.mkString(<span class="string">","</span>), controllerContext.liveBrokerIds)</div><div class="line">        stateChangeLogger.error(<span class="string">"Controller %d epoch %d "</span>.format(controllerId, controller.epoch) + failMsg)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">StateChangeFailedException</span>(failMsg)</div><div class="line">      <span class="keyword">case</span> _ =&gt;</div><div class="line">        debug(<span class="string">"Live assigned replicas for partition %s are: [%s]"</span>.format(topicAndPartition, liveAssignedReplicas))</div><div class="line">        <span class="comment">// make the first replica in the list of assigned replicas, the leader</span></div><div class="line">        <span class="comment">//根据partitionReplicaAssignment中信息选择第一个live的replica为leader,其余为isr</span></div><div class="line">        <span class="keyword">val</span> leader = liveAssignedReplicas.head</div><div class="line">        <span class="keyword">val</span> leaderIsrAndControllerEpoch = <span class="keyword">new</span> <span class="type">LeaderIsrAndControllerEpoch</span>(<span class="keyword">new</span> <span class="type">LeaderAndIsr</span>(leader, liveAssignedReplicas.toList),</div><div class="line">          controller.epoch)</div><div class="line">        debug(<span class="string">"Initializing leader and isr for partition %s to %s"</span>.format(topicAndPartition, leaderIsrAndControllerEpoch))</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="comment">//将leader和isr持久化到zookeeper</span></div><div class="line">          zkUtils.createPersistentPath(</div><div class="line">            getTopicPartitionLeaderAndIsrPath(topicAndPartition.topic, topicAndPartition.partition),</div><div class="line">            zkUtils.leaderAndIsrZkData(leaderIsrAndControllerEpoch.leaderAndIsr, controller.epoch))</div><div class="line">          <span class="comment">// <span class="doctag">NOTE:</span> the above write can fail only if the current controller lost its zk session and the new controller</span></div><div class="line">          <span class="comment">// took over and initialized this partition. This can happen if the current controller went into a long</span></div><div class="line">          <span class="comment">// GC pause</span></div><div class="line">          <span class="comment">//更新controllerContext中的partitionLeadershipInfo</span></div><div class="line">          controllerContext.partitionLeadershipInfo.put(topicAndPartition, leaderIsrAndControllerEpoch)</div><div class="line">          <span class="comment">//封装发送给这些replica所在的broker的LeaderAndIsrRequest请求，交由ControllerBrokerRequestBatch(brokerRequestBatch)处理</span></div><div class="line">          brokerRequestBatch.addLeaderAndIsrRequestForBrokers(liveAssignedReplicas, topicAndPartition.topic,</div><div class="line">            topicAndPartition.partition, leaderIsrAndControllerEpoch, replicaAssignment)</div><div class="line">        &#125; <span class="keyword">catch</span> &#123;</div><div class="line">          <span class="keyword">case</span> _: <span class="type">ZkNodeExistsException</span> =&gt;</div><div class="line">            <span class="comment">// read the controller epoch</span></div><div class="line">            <span class="keyword">val</span> leaderIsrAndEpoch = <span class="type">ReplicationUtils</span>.getLeaderIsrAndEpochForPartition(zkUtils, topicAndPartition.topic,</div><div class="line">              topicAndPartition.partition).get</div><div class="line">            <span class="keyword">val</span> failMsg = (<span class="string">"encountered error while changing partition %s's state from New to Online since LeaderAndIsr path already "</span> +</div><div class="line">                           <span class="string">"exists with value %s and controller epoch %d"</span>)</div><div class="line">                             .format(topicAndPartition, leaderIsrAndEpoch.leaderAndIsr.toString(), leaderIsrAndEpoch.controllerEpoch)</div><div class="line">            stateChangeLogger.error(<span class="string">"Controller %d epoch %d "</span>.format(controllerId, controller.epoch) + failMsg)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">StateChangeFailedException</span>(failMsg)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>2.如果是OfflinePartition，OnlinePartition<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">electLeaderForPartition</span></span>(topic: <span class="type">String</span>, partition: <span class="type">Int</span>, leaderSelector: <span class="type">PartitionLeaderSelector</span>) &#123;</div><div class="line">    <span class="keyword">val</span> topicAndPartition = <span class="type">TopicAndPartition</span>(topic, partition)</div><div class="line">    <span class="comment">// handle leader election for the partitions whose leader is no longer alive</span></div><div class="line">    stateChangeLogger.trace(<span class="string">"Controller %d epoch %d started leader election for partition %s"</span></div><div class="line">                              .format(controllerId, controller.epoch, topicAndPartition))</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">var</span> zookeeperPathUpdateSucceeded: <span class="type">Boolean</span> = <span class="literal">false</span></div><div class="line">      <span class="keyword">var</span> newLeaderAndIsr: <span class="type">LeaderAndIsr</span> = <span class="literal">null</span></div><div class="line">      <span class="keyword">var</span> replicasForThisPartition: <span class="type">Seq</span>[<span class="type">Int</span>] = <span class="type">Seq</span>.empty[<span class="type">Int</span>]</div><div class="line">      <span class="keyword">while</span>(!zookeeperPathUpdateSucceeded) &#123;</div><div class="line">        <span class="keyword">val</span> currentLeaderIsrAndEpoch = getLeaderIsrAndEpochOrThrowException(topic, partition)</div><div class="line">        <span class="keyword">val</span> currentLeaderAndIsr = currentLeaderIsrAndEpoch.leaderAndIsr</div><div class="line">        <span class="keyword">val</span> controllerEpoch = currentLeaderIsrAndEpoch.controllerEpoch</div><div class="line">        <span class="keyword">if</span> (controllerEpoch &gt; controller.epoch) &#123;</div><div class="line">          <span class="keyword">val</span> failMsg = (<span class="string">"aborted leader election for partition [%s,%d] since the LeaderAndIsr path was "</span> +</div><div class="line">                         <span class="string">"already written by another controller. This probably means that the current controller %d went through "</span> +</div><div class="line">                         <span class="string">"a soft failure and another controller was elected with epoch %d."</span>)</div><div class="line">                           .format(topic, partition, controllerId, controllerEpoch)</div><div class="line">          stateChangeLogger.error(<span class="string">"Controller %d epoch %d "</span>.format(controllerId, controller.epoch) + failMsg)</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">StateChangeFailedException</span>(failMsg)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// elect new leader or throw exception</span></div><div class="line">        <span class="keyword">val</span> (leaderAndIsr, replicas) = leaderSelector.selectLeader(topicAndPartition, currentLeaderAndIsr)</div><div class="line">        <span class="keyword">val</span> (updateSucceeded, newVersion) = <span class="type">ReplicationUtils</span>.updateLeaderAndIsr(zkUtils, topic, partition,</div><div class="line">          leaderAndIsr, controller.epoch, currentLeaderAndIsr.zkVersion)</div><div class="line">        <span class="comment">//根据不同的leaderSelector选举新的leader，这里一般调用的是OfflinePartitionLeaderSelector</span></div><div class="line">        newLeaderAndIsr = leaderAndIsr</div><div class="line">        newLeaderAndIsr.zkVersion = newVersion</div><div class="line">        <span class="comment">//将leader和isr持久化到zookeeper</span></div><div class="line">        zookeeperPathUpdateSucceeded = updateSucceeded</div><div class="line">        replicasForThisPartition = replicas</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">val</span> newLeaderIsrAndControllerEpoch = <span class="keyword">new</span> <span class="type">LeaderIsrAndControllerEpoch</span>(newLeaderAndIsr, controller.epoch)</div><div class="line">      <span class="comment">// update the leader cache</span></div><div class="line">      <span class="comment">//更新controllerContext中的partitionLeadershipInfo</span></div><div class="line">      controllerContext.partitionLeadershipInfo.put(<span class="type">TopicAndPartition</span>(topic, partition), newLeaderIsrAndControllerEpoch)</div><div class="line">      stateChangeLogger.trace(<span class="string">"Controller %d epoch %d elected leader %d for Offline partition %s"</span></div><div class="line">                                .format(controllerId, controller.epoch, newLeaderAndIsr.leader, topicAndPartition))</div><div class="line">      <span class="keyword">val</span> replicas = controllerContext.partitionReplicaAssignment(<span class="type">TopicAndPartition</span>(topic, partition))</div><div class="line">      <span class="comment">// store new leader and isr info in cache</span></div><div class="line">      <span class="comment">//封装发送给这些replica所在的broker的LeaderAndIsrRequest请求，交由ControllerBrokerRequestBatch(brokerRequestBatch)处理</span></div><div class="line">      brokerRequestBatch.addLeaderAndIsrRequestForBrokers(replicasForThisPartition, topic, partition,</div><div class="line">        newLeaderIsrAndControllerEpoch, replicas)</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">      <span class="keyword">case</span> _: <span class="type">LeaderElectionNotNeededException</span> =&gt; <span class="comment">// swallow</span></div><div class="line">      <span class="keyword">case</span> nroe: <span class="type">NoReplicaOnlineException</span> =&gt; <span class="keyword">throw</span> nroe</div><div class="line">      <span class="keyword">case</span> sce: <span class="type">Throwable</span> =&gt;</div><div class="line">        <span class="keyword">val</span> failMsg = <span class="string">"encountered error while electing leader for partition %s due to: %s."</span>.format(topicAndPartition, sce.getMessage)</div><div class="line">        stateChangeLogger.error(<span class="string">"Controller %d epoch %d "</span>.format(controllerId, controller.epoch) + failMsg)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">StateChangeFailedException</span>(failMsg, sce)</div><div class="line">    &#125;</div><div class="line">    debug(<span class="string">"After leader election, leader cache is updated to %s"</span>.format(controllerContext.partitionLeadershipInfo.map(l =&gt; (l._1, l._2))))</div><div class="line">  &#125;</div><div class="line">···</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">在brokers/topics<span class="comment">/***(具体的topic名字)/目录下注册PartitionModificationsListener-&gt;AddPartitionsListener监听</span></div><div class="line">通过处理之前启动留下的partition重分配的情况</div><div class="line">处理之前启动留下的replica重新选举的情况</div><div class="line">向其它KafkaServer发送集群topic的元数据信息已进行数据的同步更新</div><div class="line">根据配置是否开启自动均衡</div><div class="line">开始删除topic</div><div class="line"></div><div class="line">### 10.start group coordinator</div><div class="line">```scala</div><div class="line">// Hardcode Time.SYSTEM for now as some Streams tests fail otherwise, it would be good to fix the underlying issue</div><div class="line">groupCoordinator = GroupCoordinator(config, zkUtils, replicaManager, Time.SYSTEM)</div><div class="line">groupCoordinator.startup()</div></pre></td></tr></table></figure></p>
<h3 id="11-Get-the-authorizer-and-initialize-it-if-one-is-specified"><a href="#11-Get-the-authorizer-and-initialize-it-if-one-is-specified" class="headerlink" title="11.Get the authorizer and initialize it if one is specified."></a>11.Get the authorizer and initialize it if one is specified.</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">authorizer = <span class="type">Option</span>(config.authorizerClassName).filter(_.nonEmpty).map &#123; authorizerClassName =&gt;</div><div class="line">          <span class="keyword">val</span> authZ = <span class="type">CoreUtils</span>.createObject[<span class="type">Authorizer</span>](authorizerClassName)</div><div class="line">          authZ.configure(config.originals())</div><div class="line">          authZ</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="12-start-processing-requests"><a href="#12-start-processing-requests" class="headerlink" title="12.start processing requests"></a>12.start processing requests</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">apis = <span class="keyword">new</span> <span class="type">KafkaApis</span>(socketServer.requestChannel, replicaManager, adminManager, groupCoordinator,</div><div class="line">  kafkaController, zkUtils, config.brokerId, config, metadataCache, metrics, authorizer, quotaManagers,</div><div class="line">  clusterId, time)</div><div class="line">requestHandlerPool = <span class="keyword">new</span> <span class="type">KafkaRequestHandlerPool</span>(config.brokerId, socketServer.requestChannel, apis, time,</div><div class="line">  config.numIoThreads)</div><div class="line"><span class="type">Mx4jLoader</span>.maybeLoad()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="13-start-dynamic-config-manager"><a href="#13-start-dynamic-config-manager" class="headerlink" title="13.start dynamic config manager"></a>13.start dynamic config manager</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> dynamicConfigHandlers = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">ConfigHandler</span>](<span class="type">ConfigType</span>.<span class="type">Topic</span> -&gt; <span class="keyword">new</span> <span class="type">TopicConfigHandler</span>(logManager, config, quotaManagers),<span class="type">ConfigType</span>.<span class="type">Client</span> -&gt; <span class="keyword">new</span> <span class="type">ClientIdConfigHandler</span>(quotaManagers),<span class="type">ConfigType</span>.<span class="type">User</span> -&gt; <span class="keyword">new</span> <span class="type">UserConfigHandler</span>(quotaManagers, credentialProvider),<span class="type">ConfigType</span>.<span class="type">Broker</span> -&gt; <span class="keyword">new</span> <span class="type">BrokerConfigHandler</span>(config, quotaManagers))</div><div class="line"></div><div class="line"><span class="comment">// Create the config manager. start listening to notifications</span></div><div class="line">dynamicConfigManager = <span class="keyword">new</span> <span class="type">DynamicConfigManager</span>(zkUtils, dynamicConfigHandlers)</div><div class="line">dynamicConfigManager.startup()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="14-tell-everyone-we-are-alive"><a href="#14-tell-everyone-we-are-alive" class="headerlink" title="14.tell everyone we are alive"></a>14.tell everyone we are alive</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> listeners = config.advertisedListeners.map &#123; endpoint =&gt;</div><div class="line">          <span class="keyword">if</span> (endpoint.port == <span class="number">0</span>)</div><div class="line">            endpoint.copy(port = socketServer.boundPort(endpoint.listenerName))</div><div class="line">          <span class="keyword">else</span></div><div class="line">            endpoint</div><div class="line">&#125;</div><div class="line">kafkaHealthcheck = <span class="keyword">new</span> <span class="type">KafkaHealthcheck</span>(config.brokerId, listeners, zkUtils, config.rack,</div><div class="line">  config.interBrokerProtocolVersion)</div><div class="line">kafkaHealthcheck.startup()</div><div class="line"></div><div class="line"><span class="comment">// Now that the broker id is successfully registered via KafkaHealthcheck, checkpoint it</span></div><div class="line">checkpointBrokerId(config.brokerId)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>kafkaHealthcheck.startup()<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">startup</span></span>() &#123;</div><div class="line">   zkUtils.zkClient.subscribeStateChanges(sessionExpireListener)</div><div class="line">   register()</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">  * Register this broker as "alive" in zookeeper</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">register</span></span>() &#123;</div><div class="line">   <span class="keyword">val</span> jmxPort = <span class="type">System</span>.getProperty(<span class="string">"com.sun.management.jmxremote.port"</span>, <span class="string">"-1"</span>).toInt</div><div class="line">   <span class="keyword">val</span> updatedEndpoints = advertisedEndpoints.map(endpoint =&gt;</div><div class="line">     <span class="keyword">if</span> (endpoint.host == <span class="literal">null</span> || endpoint.host.trim.isEmpty)</div><div class="line">       endpoint.copy(host = <span class="type">InetAddress</span>.getLocalHost.getCanonicalHostName)</div><div class="line">     <span class="keyword">else</span></div><div class="line">       endpoint</div><div class="line">   )</div><div class="line"></div><div class="line">   <span class="comment">// the default host and port are here for compatibility with older clients that only support PLAINTEXT</span></div><div class="line">   <span class="comment">// we choose the first plaintext port, if there is one</span></div><div class="line">   <span class="comment">// or we register an empty endpoint, which means that older clients will not be able to connect</span></div><div class="line">   <span class="keyword">val</span> plaintextEndpoint = updatedEndpoints.find(_.securityProtocol == <span class="type">SecurityProtocol</span>.<span class="type">PLAINTEXT</span>).getOrElse(</div><div class="line">     <span class="keyword">new</span> <span class="type">EndPoint</span>(<span class="literal">null</span>, <span class="number">-1</span>, <span class="literal">null</span>, <span class="literal">null</span>))</div><div class="line">   zkUtils.registerBrokerInZk(brokerId, plaintextEndpoint.host, plaintextEndpoint.port, updatedEndpoints, jmxPort, rack,</div><div class="line">     interBrokerProtocolVersion)</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>注册新的brokerid</p>
<h3 id="15-register-broker-metrics"><a href="#15-register-broker-metrics" class="headerlink" title="15.register broker metrics."></a>15.register broker metrics.</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> registerStats()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导入IDEA即可看kafka源码：&quot;&gt;&lt;a href=&quot;#导入IDEA即可看kafka源码：&quot; class=&quot;headerlink&quot; title=&quot;导入IDEA即可看kafka源码：&quot;&gt;&lt;/a&gt;导入IDEA即可看kafka源码：&lt;/h2&gt;&lt;h2 id=&quot;启动之前需要安装zookeeper&quot;&gt;&lt;a href=&quot;#启动之前需要安装zookeeper&quot; class=&quot;headerlink&quot; title=&quot;启动之前需要安装zookeeper&quot;&gt;&lt;/a&gt;启动之前需要安装zookeeper&lt;/h2&gt;&lt;p&gt;地址：&lt;br&gt;&lt;a href=&quot;http://apache.fayea.com/zookeeper/&quot;&gt;http://apache.fayea.com/zookeeper/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://apache.fayea.com/zookeeper/zookeeper-3.3.6/zookeeper-3.3.6.tar.gz&quot;&gt;http://apache.fayea.com/zookeeper/zookeeper-3.3.6/zookeeper-3.3.6.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解压后再当前目录增加&quot;&gt;&lt;a href=&quot;#解压后再当前目录增加&quot; class=&quot;headerlink&quot; title=&quot;解压后再当前目录增加&quot;&gt;&lt;/a&gt;解压后再当前目录增加&lt;/h2&gt;&lt;p&gt;dataLogDir和data目录&lt;br&gt;复制一份配置文件&lt;br&gt;改名为zoo.cfg&lt;br&gt;修改配置文件：&lt;br&gt;zoo.cfg&lt;br&gt;修改并增加&lt;br&gt;dataDir=D:\tool\zookeeper-3.4.6\data&lt;br&gt;dataLogDir=D:\tool\zookeeper-3.4.6\dataLogDir&lt;/p&gt;
&lt;h2 id=&quot;启动zkServer-cmd&quot;&gt;&lt;a href=&quot;#启动zkServer-cmd&quot; class=&quot;headerlink&quot; title=&quot;启动zkServer.cmd&quot;&gt;&lt;/a&gt;启动zkServer.cmd&lt;/h2&gt;
    
    </summary>
    
      <category term="kafka" scheme="http://yoursite.com/categories/kafka/"/>
    
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka源码阅读</title>
    <link href="http://yoursite.com/2017/05/02/kafka%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://yoursite.com/2017/05/02/kafka源码阅读/</id>
    <published>2017-05-02T03:30:00.000Z</published>
    <updated>2017-05-18T00:58:23.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载kafka的源码包："><a href="#下载kafka的源码包：" class="headerlink" title="下载kafka的源码包："></a>下载kafka的源码包：</h3><p><a href="http://archive.apache.org/dist/kafka/0.10.2.1/kafka-0.10.2.1-src.tgz" target="_blank" rel="external">http://archive.apache.org/dist/kafka/0.10.2.1/kafka-0.10.2.1-src.tgz</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>gradle </p>
<p>1.官网下载<br><a href="https://gradle.org/releases" target="_blank" rel="external">https://gradle.org/releases</a><br>选择当时最新版本：<br><a href="https://downloads.gradle.org/distributions/gradle-3.5-all.zip" target="_blank" rel="external">https://downloads.gradle.org/distributions/gradle-3.5-all.zip</a></p>
<p>2.解压<br>解压到D:\tool\gradle-3.5</p>
<p>3.配置环境变量<br>GRADLE_HOME<br>D:\tool\gradle-3.5</p>
<p>Path追加;%GRADLE_HOME%\BIN;<br><a id="more"></a><br>4.测试：<br>gradle -v<br><img src="http://oh6ybr0jg.bkt.clouddn.com/gradle.jpg" alt="此处输入图片的描述"></p>
<p>安装参考:<br><a href="http://blog.csdn.net/lizhitao/article/details/26875463" target="_blank" rel="external">http://blog.csdn.net/lizhitao/article/details/26875463</a></p>
<h3 id="编译：（此处博主用某云主机编译的，很快）"><a href="#编译：（此处博主用某云主机编译的，很快）" class="headerlink" title="编译：（此处博主用某云主机编译的，很快）"></a>编译：（此处博主用某云主机编译的，很快）</h3><p>gradle idea</p>
<p><img src="http://oh6ybr0jg.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170427134226.jpg" alt="此处输入图片的描述"></p>
<p>（编译完把/root/.gradle/caches/modules-2下下载的文件放到我们的环境中C:\Users\Administrator.gradle\caches\modules-2 再windows上编译 ）<br><img src="http://oh6ybr0jg.bkt.clouddn.com/windows%E7%BC%96%E8%AF%91kafka.jpg" alt="此处输入图片的描述"></p>
<p>用IDEA工具打开<br><img src="http://oh6ybr0jg.bkt.clouddn.com/kafka_src_emv.jpg" alt="此处输入图片的描述"></p>
<h3 id="目录介绍："><a href="#目录介绍：" class="headerlink" title="目录介绍："></a>目录介绍：</h3><table>
<thead>
<tr>
<th>模块名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>admin</td>
<td>管理员模块，操作和管理topic，paritions相关，包含create/delete topic,扩展patitions</td>
</tr>
<tr>
<td>api</td>
<td>主要负责交互数据的组装，客户端与服务端交互数据编解码</td>
</tr>
<tr>
<td>client</td>
<td>Producer读取kafka broker元数据信息，topic和partitions，以及leader</td>
</tr>
<tr>
<td>cluster</td>
<td>包含几个实体类，Broker,Cluster,Partition,Replica,解释他们之间关系：          Cluster由多个broker组成，一个Broker包含多个partition，一个topic的所有partitions分布在不同broker的中，一个Replica包含多个Partition。</td>
</tr>
<tr>
<td>common</td>
<td>异常类和错误验证</td>
</tr>
<tr>
<td>consumer</td>
<td>负责所有客户端消费者数据和逻辑处理</td>
</tr>
<tr>
<td>controller</td>
<td>负责中央控制器选举，partition的leader选举，副本分配，副本重新分配，partition和replica扩容。</td>
</tr>
<tr>
<td>coordinator</td>
<td>partition分配机制</td>
</tr>
<tr>
<td>javaapi</td>
<td>提供java的producer和consumer接口api</td>
</tr>
<tr>
<td>log</td>
<td>Kafka文件存储模块，负责读写所有kafka的topic消息数据。</td>
</tr>
<tr>
<td>message</td>
<td>封装多个消息组成一个“消息集”或压缩消息集。</td>
</tr>
<tr>
<td>metrics</td>
<td>内部状态的监控模块</td>
</tr>
<tr>
<td>network</td>
<td>网络事件处理模块，负责处理和接收客户端连接</td>
</tr>
<tr>
<td>producer</td>
<td>producer实现模块，包括同步和异步发送消息。</td>
</tr>
<tr>
<td>security</td>
<td>安全</td>
</tr>
<tr>
<td>serializer</td>
<td>序列化或反序列化当前消息</td>
</tr>
<tr>
<td>server</td>
<td></td>
</tr>
<tr>
<td>tools</td>
<td>工具模块，    包含a.导出对应consumer的offset值.b.导出LogSegments信息，当前topic的log写的位置信息.c.导出zk上所有consumer的offset值.d.修改注册在zk的consumer的offset值.f.producer和consumer的使用例子.</td>
</tr>
<tr>
<td>utils</td>
<td>Json工具类，Zkutils工具类，Utils创建线程工具类，KafkaScheduler公共调度器类，公共日志类等等。</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载kafka的源码包：&quot;&gt;&lt;a href=&quot;#下载kafka的源码包：&quot; class=&quot;headerlink&quot; title=&quot;下载kafka的源码包：&quot;&gt;&lt;/a&gt;下载kafka的源码包：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://archive.apache.org/dist/kafka/0.10.2.1/kafka-0.10.2.1-src.tgz&quot;&gt;http://archive.apache.org/dist/kafka/0.10.2.1/kafka-0.10.2.1-src.tgz&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;gradle &lt;/p&gt;
&lt;p&gt;1.官网下载&lt;br&gt;&lt;a href=&quot;https://gradle.org/releases&quot;&gt;https://gradle.org/releases&lt;/a&gt;&lt;br&gt;选择当时最新版本：&lt;br&gt;&lt;a href=&quot;https://downloads.gradle.org/distributions/gradle-3.5-all.zip&quot;&gt;https://downloads.gradle.org/distributions/gradle-3.5-all.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.解压&lt;br&gt;解压到D:\tool\gradle-3.5&lt;/p&gt;
&lt;p&gt;3.配置环境变量&lt;br&gt;GRADLE_HOME&lt;br&gt;D:\tool\gradle-3.5&lt;/p&gt;
&lt;p&gt;Path追加;%GRADLE_HOME%\BIN;&lt;br&gt;
    
    </summary>
    
      <category term="kafka" scheme="http://yoursite.com/categories/kafka/"/>
    
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>CDH phoenix安装</title>
    <link href="http://yoursite.com/2017/04/18/CDH%20phoenix%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2017/04/18/CDH phoenix安装/</id>
    <published>2017-04-18T03:30:00.000Z</published>
    <updated>2018-01-15T16:45:56.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先下载jdk-略"><a href="#首先下载jdk-略" class="headerlink" title="首先下载jdk 略"></a>首先下载jdk 略</h3><p>安装maven</p>
<h2 id="下载yum源"><a href="#下载yum源" class="headerlink" title="下载yum源"></a>下载yum源</h2><p>wget <a href="http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo" target="_blank" rel="external">http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo</a> -O /etc/yum.repos.d/epel-apache-maven.repo</p>
<h2 id="安装maven："><a href="#安装maven：" class="headerlink" title="安装maven："></a>安装maven：</h2><p>yum -y install apache-maven</p>
<a id="more"></a>
<h2 id="编译phoenix"><a href="#编译phoenix" class="headerlink" title="编译phoenix"></a>编译phoenix</h2><p>找到最新版本的phoenix<br><a href="https://github.com/chiastic-security/phoenix-for-cloudera/tree/4.8-HBase-1.2-cdh5.8" target="_blank" rel="external">https://github.com/chiastic-security/phoenix-for-cloudera/tree/4.8-HBase-1.2-cdh5.8</a></p>
<h2 id="下载（博主下载到-soft下）"><a href="#下载（博主下载到-soft下）" class="headerlink" title="下载（博主下载到/soft下）"></a>下载（博主下载到/soft下）</h2><p>并编译<br>mvn clean package -DskipTests -Dcdh.flume.version=1.6.0</p>
<h2 id="打开路径："><a href="#打开路径：" class="headerlink" title="打开路径："></a>打开路径：</h2><p>/soft/phoenix-for-cloudera-4.8-HBase-1.2-cdh5.8/phoenix-assembly/target</p>
<p>找到phoenix-4.8.0-cdh5.8.0.tar.gz<br>将phoenix-4.8.0-cdh5.8.0中的phoenix-4.8.0-cdh5.8.0-server.jar拷贝到每一个RegionServer下/opt/cloudera/parcels/CDH/lib/hbase/lib</p>
<h2 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h2><p>./sqlline.py slave1:2181/hbase</p>
<h3 id="如果报错："><a href="#如果报错：" class="headerlink" title="如果报错："></a>如果报错：</h3><p>Error: org.apache.hadoop.hbase.DoNotRetryIOException: Class org.apache.phoenix.coprocessor.MetaDataEndpointImpl cannot be loaded Set hbase.table.sanity.checks to false at conf or table descriptor if you want to bypass sanity checks<br>        at org.apache.hadoop.hbase.master.HMaster.warnOrThrowExceptionForFailure(HMaster.java:1741)<br>        at org.apache.hadoop.hbase.master.HMaster.sanityCheckTableDescriptor(HMaster.java:1602)<br>        at org.apache.hadoop.hbase.master.HMaster.createTable(HMaster.java:1531)<br>        at org.apache.hadoop.hbase.master.MasterRpcServices.createTable(MasterRpcServices.java:469)<br>        at org.apache.hadoop.hbase.protobuf.generated.MasterProtos$MasterService$2.callBlockingMethod(MasterProtos.java:55682)<br>        at org.apache.hadoop.hbase.ipc.RpcServer.call(RpcServer.java:2170)<br>        at org.apache.hadoop.hbase.ipc.CallRunner.run(CallRunner.java:109)<br>        at org.apache.hadoop.hbase.ipc.RpcExecutor$Handler.run(RpcExecutor.java:185)<br>        at org.apache.hadoop.hbase.ipc.RpcExecutor$Handler.run(RpcExecutor.java:165) (state=08000,code=101)</p>
<p>需要点击<br>CDH-&gt;hbase -&gt;配置-&gt;高级<br>hbase-site.xml 的 HBase 服务高级配置代码段（安全阀）<br>添加<br>hbase.table.sanity.checks<br>false</p>
<h2 id="重启即可"><a href="#重启即可" class="headerlink" title="重启即可"></a>重启即可</h2><h2 id="如果想要安装phonenix"><a href="#如果想要安装phonenix" class="headerlink" title="如果想要安装phonenix"></a>如果想要安装phonenix</h2><p>先下载<br><a href="http://squirrel-sql.sourceforge.net/#installation" target="_blank" rel="external">http://squirrel-sql.sourceforge.net/#installation</a></p>
<h2 id="安装（安装的时候勾选imort-data和mysql）"><a href="#安装（安装的时候勾选imort-data和mysql）" class="headerlink" title="安装（安装的时候勾选imort-data和mysql）"></a>安装（安装的时候勾选imort-data和mysql）</h2><p>注：下载后直接安装jar包即可，不要解压缩<br>由于是CDH 我拷贝了如下jar防盗lib下面<br>phoenix-core-4.8.0-cdh5.8.0.jar<br>phoenix-4.8.0-cdh5.8.0-client.jar<br>phoenix-pherf-4.8.0-cdh5.8.0-minimal.jar</p>
<h2 id="链接参考"><a href="#链接参考" class="headerlink" title="链接参考;"></a>链接参考;</h2><p><a href="http://www.cnblogs.com/raphael5200/p/5260198.html" target="_blank" rel="external">http://www.cnblogs.com/raphael5200/p/5260198.html</a><br>有图</p>
<h2 id="phoenix-API"><a href="#phoenix-API" class="headerlink" title="phoenix API"></a>phoenix API</h2><p>　　<a href="http://phoenix.apache.org/language/functions.html" target="_blank" rel="external">http://phoenix.apache.org/language/functions.html</a><br>　　<a href="http://phoenix.apache.org/language/index.html" target="_blank" rel="external">http://phoenix.apache.org/language/index.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先下载jdk-略&quot;&gt;&lt;a href=&quot;#首先下载jdk-略&quot; class=&quot;headerlink&quot; title=&quot;首先下载jdk 略&quot;&gt;&lt;/a&gt;首先下载jdk 略&lt;/h3&gt;&lt;p&gt;安装maven&lt;/p&gt;
&lt;h2 id=&quot;下载yum源&quot;&gt;&lt;a href=&quot;#下载yum源&quot; class=&quot;headerlink&quot; title=&quot;下载yum源&quot;&gt;&lt;/a&gt;下载yum源&lt;/h2&gt;&lt;p&gt;wget &lt;a href=&quot;http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo&quot;&gt;http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo&lt;/a&gt; -O /etc/yum.repos.d/epel-apache-maven.repo&lt;/p&gt;
&lt;h2 id=&quot;安装maven：&quot;&gt;&lt;a href=&quot;#安装maven：&quot; class=&quot;headerlink&quot; title=&quot;安装maven：&quot;&gt;&lt;/a&gt;安装maven：&lt;/h2&gt;&lt;p&gt;yum -y install apache-maven&lt;/p&gt;
    
    </summary>
    
      <category term="CDH" scheme="http://yoursite.com/categories/CDH/"/>
    
    
      <category term="CDH" scheme="http://yoursite.com/tags/CDH/"/>
    
  </entry>
  
</feed>
